[
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Chapter 1 What is OSSTD-PRM The purpose of this documentation is to be a reference for the OSSTD-PRM tool that can be used to demonstrate compliance with the ASHRAE 90.1 standard and to rate the energy efficiency of commercial and high-rise residential buildings with designs that exceed the requirements of Standard 90.1.\nOpenStudio Standards (OSSTD) is a collection of measures and resources that automate the construction of prototype building models (e.g., office, hospital, primary school) as well as the transformations associated with ASHRAE Standard 90.1 Appendix G Performance Rating Method (PRM), a commonly exercised transformation that supports code compliance, LEED certification, and utility incentive calculations.\nOSSTD-PRM is a tool that includes the “Create ASHRAE 90.1-2019 PRM Model” measure to automatically generate the baseline model according to the rules of the 2019 version of the ASHRAE 90.1 Appendix G Performance Rating Method. While the tool currently creates a ‘baseline’ model, a future version is planned for a ‘proposed’ model.\nThe following sections provide details on the ASHRAE 90.1 Appendix G (PRM) and stable baseline that OSSTD-PRM is grounded on.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Get Started Start using OpenStudio Standard to create ASHRAE 90.1-2019 PRM models in your compliance modeling workflow\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/",
	"title": "User Guide",
	"tags": [],
	"description": "",
	"content": "Chapter 3 PRM Method User Guide A detail user guide that walks through API methods in the PRM method\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/ashrae/",
	"title": "ASHRAE 90.1 Appendix G",
	"tags": [],
	"description": "",
	"content": "ASHRAE 90.1 Appendix G Performance Rating Method (PRM) The ASHRAE 90.1 Appendix G Performance Rating Method can be used to demonstrate compliance with the standard and to rate the energy efficiency of commercial and high-rise residential buildings with designs that exceed the requirements of Standard 90.1.\nEvaluate building energy performance using annual simulation Demonstrate code compliance and allowance for trade-offs after meeting mandatory requirements Quantify performance in excess of the standard Benefits The benefits of automating the stable baseline include:\nTime Reduce Labor Minimize disruptions in permit application Cost Reduce company training cost Reduce data entry errors Opportunities Standardized reporting (ASHRAE 229) OpenStudio measure integrations "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/features/",
	"title": "Features",
	"tags": [],
	"description": "",
	"content": "Current Features of the OSSTD-PRM Here are some key features of the OSSTD-PRM:\nAutomating the 90.1 baseline generation that can help to addres accuracy and tuning of the models. Flexibility for the baseline generation. Model system transformation instead of model transformations. API calls for specific systems without running through the entire baseline generation With \u0026lsquo;rule-set\u0026rsquo; specific data not typically found in the EnergyPlus model (space), mixed typologies can be adressed through the use of compliance datasets that are included in our user documentation. There are currently 16 .csv files in the ‘compliance data’ set, each covering a specific set of /ASHRAE 90.1-2019 compliance data to OpenStudio object. The tool includes ‘compliance data’ as a set of .csv files with fixed format to improve accuracy of the PRM model. This data can be used in the ASHRAE 90.1-2019 PRM method to provide additional information that cannot be found in the OpenStudio Model (e.g., motor power). "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/capabilities/",
	"title": "Capabilities",
	"tags": [],
	"description": "",
	"content": "Current Capabilities of the OSSTD-PRM Automation Mechanism OpenStudio software facilitates the creation and manipulation of building energy models\nOpenStudio Software Development Kt (SDK) is the engine OpenStudio Application is the graphical user interface (GUI) OpenStudio Standards is a Ruby Gem add-on measure that: Includes Appendix G Baseline Automation Stable Baseline "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/limitations/",
	"title": "Limitations",
	"tags": [],
	"description": "",
	"content": "Current Limitations of the OSSTD-PRM Some features of 90.1-2019 Appendix G that have not yet been implemenented into the baseline automation are summarized below.\nPRM Rules and Differences System 90.1 Appendix G version Baseline Model Proposed Model Space and SWH system 2016 Separate System Combined System 2019 Single Central SWH System Combined System Receptacle Control 2016 No credit 2019 Allows credit Infiltration leakage rate 2016 0.4 cfm/sf at 0.3 in water 0.4 cfm/sf at 0.3 in water 2019 1.0 cfm/sf at 0.3 in water 0.6 cfm/sf in water Features System Item Baseline Model vs. Proposed Model Notes HVAC components Humidification Same as proposed model in the tool. In some cases, the baseline is required to be changed to adiabatic humidification. This has not been implemented Humidification For constant volume systems, Appendix G indicates that only 25% of the system reheat energy shall be included in the budget building performance This is not yet implemented. It must be handled via post-processing, or an EMS applied to the Baseline model. SWH Where service water heater systems in the user model are comprised of multiple distributed systems, the Appendix G model is required to use a single central system. The conversion to a central system has not yet been implemented. Design Ventilation Rates For models where design ventilation rates are greater than that required by code, then the rules of Appendix G state that the Baseline ventilation rate shall be based on the building code and will be lower than the user model. The ability to model this difference has not yet been implemented. DES Some Appendix G requirements for district energy systems have not yet been implemented. Lab exhaust fans The baseline requirement has not yet been implemented where lab exhaust fans must be modeled as constant horsepower, reflecting constant-volume stack discharge with outdoor air bypass. Equipment Transformer Efficiencies Baseline transformer efficiencies have not been implemented. Motor Efficiencies Efficiency requirements for motors serving miscellaneous electrical equipment have not yet been implemented. Commercial refrigeration equipment Efficiency requirements for commercial refrigeration equipment have not yet been implemented. "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/",
	"title": "Use with OpenStudio App",
	"tags": [],
	"description": "",
	"content": "Chapter 2.1 Use with OpenStudio APP One way to use the Create ASHRAE 90.1-2019 PRM Model is as an add-in measure to the OpenStudio Application.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/",
	"title": "Use with OpenStudio Engine",
	"tags": [],
	"description": "",
	"content": "Chapter 2.2 Use with OpenStudio Engine This tutorial introduces a scripting method of using OpenStudio Standard in combination with OpenStudio engine to generate ASHRAE 90.1-2019 PRM model.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/model_requirements/",
	"title": "Model requirements",
	"tags": [],
	"description": "",
	"content": "Chapter 3.1 Model Requirements This chapter lists model requriements for a successful ASHRAE 90.1-2019 PRM model generation.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/",
	"title": "User Compliance Data",
	"tags": [],
	"description": "",
	"content": "Chapter 3.2 User Compliance Data Compliance data is a set of .csv files with fixed format. The data can be used in the ASHRAE 90.1-2019 PRM method to provide additional information that cannot not be found in an OpenStudio model (e.g., motor_power). The compliance data can improve the accuracy of the PRM model.\nDownload Compliance Data Set userdata_csv.zip (5 KB) Currently there are 16 .csv files in the compliance data set. Each of them covers a specific set of ASHRAE 90.1-2019 compliance data to OpenStudio object. This chapter will provide the detail explaination on each of the file.\nQuick link to each compliance data file user guide: userdata_airloop_hvac.csv userdata_airloop_hvac_doas.csv userdata_building.csv userdata_design_specification_outdoor_air.csv userdata_electric_equipment.csv userdata_exterior_lights.csv userdata_gas_equipment.csv userdata_lights.csv userdata_space.csv userdata_spacetype.csv userdata_thermal_zone.csv userdata_wateruse_connections.csv userdata_wateruse_equipment.csv userdata_wateruse_equipment_definition.csv userdata_zone_hvac.csv userdata_zone_infiltration.csv "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/prm_api_ref/",
	"title": "PRM API Reference",
	"tags": [],
	"description": "",
	"content": "Chapter 3.3 PRM API Reference A detail API reference to walk through functions in the OpenStudio Standard PRM method.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/ashrae/stable_baseline/",
	"title": "ASHRAE 90.1 Stable Baseline",
	"tags": [],
	"description": "",
	"content": "Appendix G uses a stable baseline approach with efficiency levels set at values that are not intended to be updated with each new addition of the code. Instead, the proposed building energy performance needs to exceed that of the baseline by an amount commensurate with the code year being evaluated.\nBackground These changes came about with the modeling procedures in the 2016 standard, that are fundamentally different from previous versions in that the baseline building is fixed to be roughly equal in stringency to Standard 90.1-2004 and compliance is determined through a metric called Performance Cost Index (PCI). Prior to 2016, the Appendix G baseline building stringency changed with each version of Standard 90.1 and sometimes with each addendum that created much confusion for software developers, energy modelers and program administrators. For many use-cases, an excessive amount of time was spent creating the baseline building and verifying its correctness. With the new procedure, the intent is that the baseline building stringency does not change. Instead, as the standard becomes more stringent, a greater level of improvement over the stable baseline is required. The 2004 version of the standard has been used for defining the baseline performance. This version of the standard has been used as a benchmark by ASHRAE and the US DOE for evaluating the stringency of more recent versions of Standard 90.1 and now it is used as a stable baseline for all performance calculations. Each consecutive version of the Standard would update the target PCI without modifying the stringency of the baseline building requirements. Appendix G Moving Baseline vs. Stable Baseline The image below compares the Appendix G \u0026ldquo;moving baseline\u0026rdquo; and the \u0026ldquo;stable baseline\u0026rdquo;.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/capabilities/rules_appendix_g_prm/",
	"title": "Appendix G PRM Rules",
	"tags": [],
	"description": "",
	"content": "Appendix G Performance Rating Method Rules and OSSTD-PRM The \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure provides a detailed implementation of the rules of the Appendix G Performance Rating Method. Below are some of the key changes that are applied by the tool when creating the Baseline model:\nApply baseline envelope rules Space conditioning type Constructions Insulation levels Window-to-wall ratio Skylight-to-roof ratio Infiltration Apply baseline lighting rules Lighting power Lighting occupancy sensor control Determine and create baseline HVAC systems Remove user model HVAC Determine baseline HVAC based on building type and Appendix G rules Create new baseline HVAC systems Apply special rules for computer rooms and laboratories Size HVAC systems Apply HVAC efficiencies Apply fan power adjustments Apply baseline HVAC controls Rotate building model through cardinal directions Check for unmet load hours and rectify, if needed Handle additional compliance data Multiple building types Plug load measures Elevators Exterior lighting Interior lighting exceptions Number of systems per zone "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/features/benefits/",
	"title": "Benefits",
	"tags": [],
	"description": "",
	"content": " Here are some key benefits of using the OSSTD-PRM: OpenStudio provides an Application Programming Interface (API) to access the EnergyPlus modeling engine providing some key benefits:\nStable Version controlled interface Space typology abstractions Ease for end-users to model buildings Accessibility with language bindings in Ruby, Python and C Sharp Command Line Interface (CLI) is a powerful, cross-platform tool that allows users to run OpenStudio based workflows on supported architectures such as Linux, Windows and Mac. OpenStudio Measures is a scripting facility that uses Ruby (and soon to extend support for Python) scripts to automate model queries and transformations and to incrementally extend and customize the platform. These Measures perform transformations that correspond to energy conservation measures—that’s the origin of the name—that range from simple lighting power density reductions to complex and context sensitive daylighting transformations, create custom reports, and link energy simulation to other analyses.\nOSSTD-PRM\nStable platform for existing users and third-party tool while enabling development of new applications Improve runtime execution Reduce computation costs Improve accessibility of modeling capabilities using SDK, CLI and/or language bindings Expand the range of equipment available for simulations Provide easier access to analytical tools Code, documentation, and discussions related to the software and its documentation are in the open, and the algorithms and procedures used in the software are open to audit and validation Transparency in process and development using GitHub and ‘git’ version control "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/features/gallery/",
	"title": "Gallery",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/capabilities/use_case_applications/",
	"title": "Use Cases and Applications",
	"tags": [],
	"description": "",
	"content": "Here are some use cases for the OSSTD-PRM Energy Modelers: can use the OSSTD-PRM measure to automatically generate the baseline building and refer to PRM-RM for rules on generating the model of the proposed design.\nSoftware Developers: Software developers can use the PRM-RM modeling guidelines to customize their software to automatically create the baseline building model and assure that schedules and other modeling assumptions are neutral. The PRM-RM also defines contents for a standard output report that address the reporting requirements as defined for the PRM as well as United States Green Building Council’s (USGBC) Leadership in Energy and Environmental Design (LEED) certification\nProgram Administrators: Program administrators, code officials and rating authorities that administer incentive programs that are based on the PRM of Standard 90.1. Program administrators can use this documentation to better understand the tool and measure for the building modeling requirements.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/where_os_app/",
	"title": "Get OpenStudio",
	"tags": [],
	"description": "",
	"content": "Get The OpenStudio Application The OpenStudio application can be found on the github page for the OpenStudio Coalition. The application provides a graphical user interface to the OpenStudio engine, and the engine is included in the download package.\nhttps://github.com/openstudiocoalition/OpenStudioApplication/releases\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/where_os_measure/",
	"title": "Install the measure",
	"tags": [],
	"description": "",
	"content": "Where to find OSSTD create baseline measure and how to install From the OpenStudio Application interface, select Components \u0026amp; Measures from the menu at the top. Search for \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; Select the \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure in the search result, and select Download Close the intall measure window "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/how_run_measure/",
	"title": "Run the measure",
	"tags": [],
	"description": "",
	"content": "How to run the measure Before running the measure, review the model requirements in: Model Requirements\nSelect \u0026ldquo;Components \u0026amp; Measures\u0026rdquo; from the top menu in the screen Select Whole Building/ Space Types in the Apply Measure window Click the arrow next to Space types to show available measures Select the \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure Make selections in the right-hand side of the window as needed Click on the Apply Measure at the bottom of the screen "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/run_measure_cli/",
	"title": "Run measure in CLI",
	"tags": [],
	"description": "",
	"content": "Introduction This guide is intended to provide instructions on how to run the Create ASHRAE 90.1-2019 PRM Model measure via the command line interface (CLI).\nNote: This approach allows the use of an updated version of the OpenStudio Standards package (V3.5), which is not accessible through the OpenStudio Application (V1.5).\nBackground The Create ASHRAE 90.1-2019 PRM Model measure provides a tool to automatically generate the baseline model according to the rules of the 2019 version of the ASHRAE 90.1 Appendix G Performance Rating Method.\nUsage Instructions Create Baseline Building: measures.zip (7 KB) Setup To get started :\nDownload and install OpenStudio v3.5.0 using the default components selection. Download this openstudio-standards package. Unzip the package to a local directory. Download the create baseline building measure in this page. Setup a local directory to include all required inputs (the following example is one way to setup the directory): Seed mode: place the .osm file in a directory named files. The Openstudio model should meet the model requirements. Weather file: place the .epw file in a directory named weather. Measure: place the CreateBaselineBuilding measure in a directory called measures. OS Workflow: place the .osw file in the main directory. User Data (Optional): place the .csv file in the main directory (same level as the .osw). The use of the user data can be found in the add compliance data section. The image below shows one way to setup the main directory and their correponding sub-directories.\nThe OSW file can be structured as shown in the image below.\nLines 2-3 define the seed model and weather file. Lines 4-5 define the measure path. Lines 9-14 contain arguments to be passed to the measure. A detail description of the arguments can be found in the API document. Important Note: The directory names are not case sensitive. If you want to change the names of the directories that contain the seed model and weather file, make sure to define the paths in the OSW file.\nExecution Open Command Prompt as an adminstrator. Type the following command with paths to the openstudio\\bin, openstudio-standard\\lib and the OSW directories.\nC:\\openstudio-3.5.0\\bin\\openstudio.exe -I \u0026quot;[LOCAL_PATH]\\openstudio-standard\\lib\u0026quot; run -w \u0026quot;[LOCAL_PATH]\\workflow.osw\u0026quot; Example:\nC:\\openstudio-3.5.0\\bin\\openstudio.exe -I \u0026#34;C:\\Users\\example_user\\openstudio-standard\\lib\u0026#34; run -w \u0026#34;C:\\Users\\example_user\\baselinePRM\\test.osw\u0026#34; The -I command shall pointing to the local directory of the Openstudio-standards.\nIf the openstudio command is not recognized, either add the executable to your environemnt PATH or add the full length to the openstudio-3.5.0\\bin directory. It is advised to avoid spaces in file and directory names. Use quotation marks when specifying long file names or paths with spaces.\nThe OpenStudio SDK version can be 3.2.1 or later.\nOutput Once the workflow is completed:\nAn output OSW file out.osw is written to indicate whether or not the simulation run was successful. Once the workflow is completed successfully:\nA run directory is generated which contains all input/output files. A reports directory is created which contains energyplus\u0026rsquo;s standard html report. "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "This instruction provides all you need to get OpenStudio Standard PRM installed on your local computer for scripting with OpenStudio API.\nDownload Ruby Download OpenStudio Connect Ruby with OpenStudio Download OpenStudio Standard You will need the following applications to ensure OpenStudio Standard is running on your project.\nDownload Ruby Ruby 2.7. Latest stable version is 2.7.6 and it can be downloaded at: https://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.6.tar.gz\nFollow the installation guide to complete the ruby installation. You can also verify the ruby installation with the following command in the command line:\nC:\\Users\\sample_user\u0026gt;ruby -v ruby 2.7.4p191 (2021-07-07 revision a21a3b7d23) [x64-mingw32] Download OpenStudio OpenStudio 3.2. The latest stable 3.2 version is 3.2.1 and it can be downloaded at: https://github.com/NREL/OpenStudio/releases/tag/v3.2.1\nMore recent version of OpenStudio can be found in the OpenStudio release link: https://github.com/NREL/OpenStudio/releases. The PRM is tested against v3.4 and lower.\nImportnat Note: The PRM routine in the OpenStudio Standard is tested against v3.4. However, the OpenStudio Standard is only tested on v3.2.1 or lower.\nConnect Ruby to OpenStudio Once you have both Ruby and OpenStudio installed, the next thing is to connect OpenStudio with Ruby.\nStep 1: navigate to ruby installation directory and find the site_ruby folder. In Windows, it should be a directory like this: C:\\Ruby27-x64\\lib\\ruby\\site_ruby Step 2: create a new ruby file called openstudio.rb under the site_ruby folder. Step 3: open the openstudio.rb file and add one line:\nrequire \u0026#34;C:/[Openstudio directory]/Ruby/openstudio.rb\u0026#34; The directory shall point to the openstudio.rb file under the OpenStudio installation folder. Revise the path after require based on your actual installation directory.\nYou can verify the setting with the following command in the command line.\nC:\\Users\\smaple_user\u0026gt; irb irb(main):001:0\u0026gt; require \u0026#34;openstudio\u0026#34; =\u0026gt; true Return true verifies a success on your local setup. Download OpenStudio Standard Now we can create a new ruby project using the OpenStudio Standard package.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/call_use_api/",
	"title": "Call measure via API",
	"tags": [],
	"description": "",
	"content": "This instruction will give an quick overview of the API method that generates baseline model(s) from a provided openstudio model.\nCreate stable baseline building API User data Baseline outputs Create stable baseline building API The ASHRAE 90.1-2019 PRM automation can be called in a Ruby script via its API method. The API method provides great flexibility for creating customized modeling workflow. For example:\nrequire `openstudio` require `openstudio-standard` model_path = \u0026#39;C:\\demo\\output\\\\\u0026#39; save_path = \u0026#39;C:\\demo\\source\\\\\u0026#39; base_model = \u0026#39;test_model.osm\u0026#39; modified_model = \u0026#39;modified_model_demo.osm\u0026#39; translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path + base_model).get # Adjust window to wall ratio to 60% model.getSurfaces.each do |ss| unless ss.subSurfaces.empty? orig_construction = ss.subSurfaces[0].construction.get ss.subSurfaces.sort.each(\u0026amp;:remove) new_window = ss.setWindowToWallRatio(0.6, 0.8, true).get new_window.setConstruction(orig_construction) end end # Add overhangs on south facade. model.getSubSurfaces.each do |s| absoluteAzimuth = OpenStudio.convert(s.azimuth, \u0026#39;rad\u0026#39;, \u0026#39;deg\u0026#39;).get + s.space.get.directionofRelativeNorth + model.getBuilding.northAxis absoluteAzimuth -= 360.0 until absoluteAzimuth \u0026lt; 360.0 next if !((absoluteAzimuth \u0026gt;= 135.0) \u0026amp;\u0026amp; (absoluteAzimuth \u0026lt; 225.0)) new_overhang = s.addOverhangByProjectionFactor(0.8, 0) end # Build the standard PRM routine standard = Standard.build(\u0026#39;90.1-PRM-2019\u0026#39;) baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; hvac_bldg_type = \u0026#39;other nonresidential\u0026#39; wwr_bldg_type = \u0026#39;Office \u0026lt;= 5,000 sq ft\u0026#39; swh_bldg_type = \u0026#39;Office\u0026#39; standard.model_create_prm_stable_baseline_building(model, climate_zone, hvac_bldg_type, wwr_bldg_type, swh_bldg_type, baseline_dir, run_all_orients=false, unmet_load_hours_check=true, debug=false) What the script above did was:\nLoad an OSM model - it could be any model created as a proposed model for creating a baseline system. Make adjustments to the model: Change the window-to-wall ratio to 60% (adding a span glazings on every wall) Add overhangs to the south facade of the model. General the baseline model by calling the API method. At the end of the script, the standard object calls a function model_create_prm_stable_baseline_building is the API function that generates the baseline model.\nstandard.model_create_prm_stable_baseline_building(model, climate_zone, hvac_bldg_type, wwr_bldg_type, swh_bldg_type, baseline_dir, run_all_orients=false, unmet_load_hours_check=true, debug=false) A detail description of the arguments can be found in the API document.\nUser data In PRM routines, one additional step allows users to add code compliance-specific data to the baseline generation workflow. Data missing in most building energy models, such as space type for a space, lighting space type for space lighting, or motor horsepower for electric equipment, can be added to the user data before calling the API. The use of the user data can be found in the Add compliance data section.\n# Create PRM object standard = Standard.build(\u0026#39;90.1-PRM-2019\u0026#39;) baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # Converts user data from .csv file to .json file json_path = standard.convert_userdata_csv_to_json(\u0026#34;#{File.dirname(Dir.pwd)}/user_data\u0026#34;, \u0026#34;#{baseline_dir}\u0026#34;) # Load the user data json files into the PRM routine. standard.load_userdata_to_standards_database(json_path) # Generate baseline standard.model_create_prm_stable_baseline_building(model, climate_zone, hvac_bldg_type, wwr_bldg_type, swh_bldg_type, baseline_dir, run_all_orients=false, unmet_load_hours_check=true, debug=false) The above script first creates the PRM object from OpenStudio Standards, then converts the data from .csv to .json and loads them into the object before generating the baseline. It is important to convert the CSV to JSON before loading them to the PRM object. The API documents gives a more detail description of the function convert_userdata_csv_to_json and load_userdata_to_standards_database.\nBaseline outputs A successful baseline generation creates several baseline model(s) and folders under the baseline_dir as shown in the image below. SR_[NUMBER]: Several folders are generated and saved in the baseline_dir. They typically start with SR_ and ends with a number or PROP. These folders contain the energy model and their sizing run outputs. The number records the index of the sizing run. PROP indicates a sizing run on a proposed model. A more detailed description of the baseline generation steps is described in the API document.\nuser_data_json: The user_data_json saves all user-defined data in JSON format. The list includes the complete set of user data regardless there is data or not.\nfinal.osm: A baseline OpenStudio model at 0 rotation degrees.\nfinal_NUM.idf: Depending on whether the baseline model case meets the G3.1(5).a building rotation requirements, the baseline generation produces one or four EnergyPlus files. If there are no rotations, the folder would only contain one final.idf; else, there would befinal_0.idf, final_90.idf, final_180.idf, and final_270.idf.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/link_api_doc/",
	"title": "API documentation",
	"tags": [],
	"description": "",
	"content": "The description of PRM API methods can be found in this API document.\nIn addition, the PRM method is a subroutine under the package of OpenStudio Standard project. Therefore, OpenStudio Standard API methods can be accessed from the same routine. For example:\nrequire \u0026#39;openstudio\u0026#39; require \u0026#39;openstudio-standard\u0026#39; standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path + base_model).get standard.model_remove_prm_hvac(model) standard.model_remove_prm_ems_objects(model) thermal_zones = [] model.getThermalZones.each do |zone| thermal_zones.append(zone) end end # Hot water loop hot_water_loop = standard.model_add_hw_loop(model, \u0026#39;NaturalGas\u0026#39;) # Heat pump loop condenser_loop = standard.model_get_or_add_heat_pump_loop(model, \u0026#39;Electricity\u0026#39;, \u0026#39;Electricity\u0026#39;, heat_pump_loop_cooling_type:\u0026#39;CoolingTower\u0026#39;) standard.model_add_water_source_hp(model, thermal_zones, condenser_loop, ventilation: true) standard.model_add_doas(model, thermal_top_zones, system_name: \u0026#39;DOAS TOP System\u0026#39;, doas_type: \u0026#39;DOASCV\u0026#39;, hot_water_loop: hot_water_loop, chilled_water_loop: nil) The above code loads a model, removes the existing HVAC systems, and calls the OpenStudio Standard methods to add a water source heat pump system.\nHowever, using those functions is out of the scope of this documentation. Using those functions shall always refer to the official OpenStudio Standard API documentation.\nThe PRM routine also can be used to work with OpenStudio APIs. Access to the OpenStudio API documentation can be found on the OpenStudio official website.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/quick_start/",
	"title": "Examples",
	"tags": [],
	"description": "",
	"content": "In this chapter, we will cover three examples to showcase the capability of the OSSTD-PRM method.\nDemo files Preparation Demo 1: Transformations Project parameters Directories Initialize Baseline generation Demo 1 results Demo 2: User data User data Demo 2 results Demo 3: HVAC Demo 3 results Demo files Each zip file contains the model, user data and weather file for performing demos.\nDemo zip files demo1.zip (304 KB) demo2.zip (303 KB) demo3.zip (339 KB) Preparation You will need the script below for running the demo case. We will later explain each code block in the script.\nrequire \u0026#39;openstudio\u0026#39; require \u0026#39;openstudio-standards\u0026#39; # Project parameters default_hvac_bldg_type = \u0026#39;other nonresidential\u0026#39; default_wwr_bldg_type = \u0026#39;Office 5,000 to 50,000 sq ft\u0026#39; default_swh_bldg_type = \u0026#39;Office\u0026#39; climate_zone = \u0026#39;ASHRAE 169-2013-4A\u0026#39; # directories - change these two variables demo_folder = \u0026#39;demo1\u0026#39; proposed_model = \u0026#39;geometry_demo_model.osm\u0026#39; baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; demo_path = \u0026#34;#{File.dirname(Dir.pwd)}/source\u0026#34; proposed_geo_model = \u0026#34;/#{demo_folder}/#{proposed_model}\u0026#34; user_data_path = \u0026#34;#{demo_path}/#{demo_folder}/user_data\u0026#34; # Script begins translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(\u0026#34;#{demo_path}#{proposed_geo_model}\u0026#34;).get # Generate baseline standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) # Run simulation on proposed model standard.model_run_simulation_and_log_errors(model, run_dir = \u0026#34;#{baseline_dir}/PROP\u0026#34;) # Load User data json_path = standard.convert_userdata_csv_to_json(user_data_path, \u0026#34;#{baseline_dir}\u0026#34;) standard.load_userdata_to_standards_database(json_path) create_results = standard.model_create_prm_stable_baseline_building(model, climate_zone, default_hvac_bldg_type, default_wwr_bldg_type, default_swh_bldg_type, baseline_dir, unmet_load_hours_check=false) Making sure you have openstudio and openstudio-standards installed on your local environment. The installation steps can be found in installation.\nIt is important to let OSM file pointing to the correct weather file directory. You can find the path in the .OSM file, OS:WeatherFile, data group. The default weather file path is ../demo[X]/USA_NY_New.York-J.F.Kennedy.Intl.AP.744860_TMY3.epw, which is pointing to the weather file under the folder demo[X].\nDemo 1 - Transformation The proposed model is a typical medium sized office building with roughly 60% window-to-wall ratio (WWR) and overhangs on its south facade. Project parameters First, we will need to check the project parameters in the script.\n# Project parameters default_hvac_bldg_type = \u0026#39;other nonresidential\u0026#39; default_wwr_bldg_type = \u0026#39;Office 5,000 to 50,000 sq ft\u0026#39; default_swh_bldg_type = \u0026#39;Office\u0026#39; climate_zone = \u0026#39;ASHRAE 169-2013-4A\u0026#39; For this demo, the example is a typical medium sized office building. The default_hvac_bldg_type is set to other nonresidential, and the window to wall ratio and service water heating system building types are both set according to a related category. The building is assumed to locate in New York City. So its climate zone is 4A. These default values shall be assigned with correct strings. All these strings shall match exactly to the designed list.\nYou can find the full list of strings for each project parameter here\nDirectories # directories - change these two variables demo_folder = \u0026#39;demo1\u0026#39; proposed_model = \u0026#39;geometry_demo_model.osm\u0026#39; # You may need to change the paths below based on how the project is setup on your local directory: # This path points to a directory that saves all baseline generation outputs baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # This path points to the parent folder that contains demo1, demo2 or demo3 folder. demo_path = \u0026#34;#{File.dirname(Dir.pwd)}/source\u0026#34; proposed_geo_model = \u0026#34;/#{demo_folder}/#{proposed_model}\u0026#34; user_data_path = \u0026#34;#{demo_path}/#{demo_folder}/user_data\u0026#34; There are four directories need attentions.\nbaseline_dir is the path used by PRM method to save all output files. demo_path is the parent path for demo folder proposed_geo_model is the relative path of proposed model. The path shall be relative to the demo_path user_data_path is the path to user data folder, which contains all the user data .csv. Initialize Next we will intialize instances for the baseline generation.\n# Script begins translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(\u0026#34;#{demo_path}#{proposed_geo_model}\u0026#34;).get # Generate baseline standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) model is the proposed model loaded by OpenStudio version translator. standard is the 90.1 PRM 2019 instance of the OpenStudio Standard, which will be used for generating the PRM baseline.\nBaseline generation The last step is to generate the baseline. Before calling the function, there are a few more steps to do.\n# Run simulation on proposed model standard.model_run_simulation_and_log_errors(model, run_dir = \u0026#34;#{baseline_dir}/PROP\u0026#34;) # Load User data json_path = standard.convert_userdata_csv_to_json(user_data_path, \u0026#34;#{baseline_dir}\u0026#34;) standard.load_userdata_to_standards_database(json_path) create_results = standard.model_create_prm_stable_baseline_building(model, climate_zone, default_hvac_bldg_type, default_wwr_bldg_type, default_swh_bldg_type, baseline_dir, unmet_load_hours_check=false) Step 1: Run a simulation on a proposed model. This will generate necessary information for the baseline function Step 2: Convert the user data .csv to .json and load it into the standard instance. Step 3: Call the function to generate baseline model. You can skip running simulation on proposed model by turning the unmet_load_hours_check flag to true.\nDemo 1 results Noticeably, the generated baseline model has smaller windows (31% WWR) and no overhangs. Besides geometry, several building system performances are also updated. Table below shows some transformation examples that can be found in the baseline model.\nCategory Dependent Variable Standard Requirement Baseline Value Exterior Wall Climate Zone 4, nonresidential U-0.124 (R-8.06) PRM Steel Framed Exetrior Wall R-8.06 Roof Climate Zone 4, nonresidential U-0.063 (R-15.87) PRM IEAD Roof R-15.87 Window Climate Zone 4, nonresidential, 30-40% WWR U-0.57, SHGC-0.39, Vt-0.43 PRM U 0.57 SHGC 0.39 VT 0.4 Simple Glazing Window LPD Office, whole building 1.10 W/ft2 11.8 W/m2 In the next demo, we will demo how to use the user data to handle multiple building types for the same model.\nDemo 2: User data Demo 1 shows the basic functionality of the PRM method. In Demo 2, we will demonstrate how to hanle multiple building types in a model. It is common for a building to have multiple types, for example, the first floor of the medium office can function as retail spaces and the rest of floors are offices. In this case, we will need to provide more information for the PRM function so it can properly handle the multi-building types scenario.\nUser data To do that, we will need to use the userdata_space.csv. In the demo2 zip file, there is a user_data folder. Inside this folder, we have a userdata_space.csv file. Let\u0026rsquo;s open the file to inspect.\nIn the file, we can see all perimeter zones on the first floor are set to Retail (strip mall) WWR building type. For lighting space type, the Perimeter_bot_ZN_2 is set to retail mall concourse and the other spaces are set to retail - whole building. With this file, we will expect the first floor perimeter spaces have different window to wall ratios and lighting power densities than the other spaces in the building.\nDemo 2 results Before running the same script, we need to update the directories, specifically, the demo_folder and proposed_model\n# directories - change these two variables demo_folder = \u0026#39;demo2\u0026#39; proposed_model = \u0026#39;geometry_demo_model.osm\u0026#39; Immediately, we noticed the WWR on the first loor is much smaller than the WWR on the second and third floor. This is because the ASHRAE 90.1 PRM requires the Retail (strip mall) WWR to be 19%, which is much smaller than the Office 5,000 to 50,000 sq ft (31%).\nCategory Apply to Dependent Variable Standard Requirement Baseline Value Exterior Wall All Climate Zone 4, nonresidential U-0.124 (R-8.06) PRM Steel Framed Exetrior Wall R-8.06 Roof All Climate Zone 4, nonresidential U-0.063 (R-15.87) PRM IEAD Roof R-15.87 Window All Climate Zone 4, nonresidential, 30-40% WWR U-0.57, SHGC-0.39, Vt-0.43 PRM U 0.57 SHGC 0.39 VT 0.4 Simple Glazing Window LPD Spaces excluded from user data Office, whole building 1.10 W/ft2 11.8 W/m2 LPD First floor 1, 3, and 4 User data: retail - whole building 1.50 W/ft2 16.1 W/m2 LPD First floor 2 User data: retail mall concourse 1.70 W/ft2 18.3 W/m2 In the next demo, we will show an HVAC transformation example.\nDemo 3: HVAC In the last demo, we have a medium office equipped with water source heat pumps for heating and cooling and a DOAS for ventilation. Also, the Core Top Zone is being identified as a high equipment density (40 W/m2) room.\nAccording to the ASHRAE 90.1 PRM method, the baseline system type for the medium office shall be a packaged VAV with reheat (system 5) and the Core Top Zone shall be separatedly conditioned by a packaged single zone air conditioner (system 3) according to the exception c. Demo 3 results First step, update the directories to demo3. It should note the proposed_model is changed to hvac_demo_model.osm.\n# directories - change these two variables demo_folder = \u0026#39;demo3\u0026#39; proposed_model = \u0026#39;hvac_demo_model.osm\u0026#39; After the simulation run, the baseline HVAC systems shall be the same as the graphic below. Hope the above examples provide some ideas and inspirations on how to use the PRM method. For detail API explainations, check out the API document\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/troubleshooting/",
	"title": "Troubleshooting",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/model_requirements/best_practices/",
	"title": "Best Practices",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/model_requirements/standards_space_type/",
	"title": "Standards space type",
	"tags": [],
	"description": "",
	"content": "Standards Space Type The SpaceType object in OpenStudio has the property StandardsSpaceType which can be used to identify the appropriate lighting space type. The lighting space type is used to determine the baseline lighting power density and lighting control savings based on Table G3.7 of 90.1 Appendix G. The lighting space type is also used for a number of other purposes in the baseline generation, including: determining special requirements for computer rooms and laboratories, identifying residential spaces, and determining applicability of receptacle control measures according to space type.\nThe lighting space type can also be assigned using the User Compliance Data files for Space Type and Space. If the User Compliance Data files contain lighting space type assignments, there is a hierachy for determining the final assignments:\nuser_data_space is first priority user_data_space_type is second priority StandardsSpaceType property of the SpaceType objest is lowest priority It is possible to have lighting space type identified at the user_data_space level for some spaces and at either the user_data_space_type level or SpaceType:StandardsSpaceType level for other spaces.\nValid entries for StandardsSpaceType are listed below. If the \u0026ldquo;whole building\u0026rdquo; options are used, the baseline model will not get credit for occupancy control of lighting.\nStandardsSpaceType apartment - hardwired audience seating - exercise center audience seating - gymnasium audience seating - sports arena audience seating - transportation facility audience seating - convention center audience seating - penitentiary audience seating - motion picture theater audience seating - religious facility audience seating - performing arts theater audience seating - auditorium audience seating - all other atrium \u0026gt; 40 ft height atrium \u0026lt;= 40 ft height banking activity classroom/lecture/training - penitentiary classroom/lecture/training - preschool to 12th classroom - laboratory or shop classroom/lecture/training - all other conference/meeting/multipurpose confinement cells copy/print corridor - manufacturing facility corridor - all other corridor - hospital corridor for visually impaired courtroom computer room dining - penitentiary dining - bar/lounge/leisure dining - family dining for visually impaired dining - cafeteria/fast food dining - all other electrical/mechanical emergency vehicle garage kitchen guest room judges chambers laboratory laundry/washing loading dock lobby - motion picture theater lobby - hotel lobby - performing arts theater lobby for visually impaired lobby - elevator lobby - all other locker room lounge/breakroom - healthcare facility lounge/breakroom - all other office - enclosed \u0026lt;= 250 sf office - open office - open with workstation occup sensors parking area, interior pharmacy restroom - visually impaired restroom - all other sales seating area, general stairwell storage \u0026lt; 50 sf - hospital storage 50 to 1000 sf - hospital storage \u0026lt; 50 sf - all other storage 50 to 1000 sf - all other storage \u0026gt;= 1000 sf - all other vehicular maintenance workshop chapel - visually impaired recreation/common living - visually impaired automotive exhibit - convention center dormitory - living quarters firestation - sleeping quarters gymnasium exercise area gymnasium playing area emergency room exam/treatment medical supply nursery nurses station operating room patient room physical therapy recovery library - reading library - stacks detailed manufacuring manufacturing equipment room manufacturing extra high bay manufacturing high bay manufacturing low bay museum exhibit area museum restoration post office - sorting area fellowship hall - religious facility worship/pulpit/choir area retail dressing room retail mall concourse sports arena playing area, class I sports arena playing area, class II sports arena playing area, class III sports arena playing area, class IV baggage/carousel airport concourse transportation ticket counter warehouse - bulk storage warehouse - fine storage attic - unoccupied elevator core plenum automotive facility - whole building convention center - whole building courthouse - whole building dining: bar lounge/leisure - whole building dining: cafeteria/fast food - whole building dining: family - whole building dormitory - whole building exercise center - whole building fire station - whole building gymnasium - whole building health-care clinic - whole building hospital - whole building hotel/motel - whole building library - whole building manufacturing facility - whole building motion picture theater - whole building multifamily - whole building museum - whole building office - whole building parking garage - whole building penitentiary - whole building performing arts theater - whole building police station - whole building post office - whole building religious facility - whole building retail - whole building school/university - whole building sports arena - whole building town hall - whole building transportation - whole building warehouse - whole building workshop - whole building "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/model_requirements/other_requirements/",
	"title": "Other requirements",
	"tags": [],
	"description": "",
	"content": "The user model should have occupancy control of lighting incorporated into the lighing use schedules where it is required by ASHRAE 90.1-2019. The program will back-calculate the uncontrolled lighting schedules for the Baseline model based on the occupancy sensor reduction values in Appendix G Table G3.7.\nThe user model needs to have a fully defined HVAC system. Most of the HVAC objects are deleted when the Appendix G Baseline is created, but some information is taken from the user model and transferred to the Baselne. This includes the following:\nZone ventilation rates. For zones that require demand control ventilation in the baseline model, ventilation must be provided in terms of both flow per area and flow per person. The program will issue a warning if this is not done. Fan schedules Proportion of fan power for supply, return, and relief fans "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/space/",
	"title": "Space",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/building_type/",
	"title": "Building - Type &amp; System",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/hvac/",
	"title": "HVAC",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/equipment/",
	"title": "Equipment",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/lighting/",
	"title": "Lighting",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/water/",
	"title": "Water",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/prm_api_ref/baseline_generation_api/",
	"title": "Baseline generation API",
	"tags": [],
	"description": "",
	"content": " model_create_prm_stable_baseline_building model climate_zone default_hvac_bldg_type default_wwr_bldg_type default_swh_bldg_type output_dir unmet_load_hours debug convert_userdata_csv_to_json userdata_dir output_dir load_userdata_to_standards_database model_create_prm_stable_baseline_building standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) create_results = standard.model_create_prm_stable_baseline_building(model, climate_zone, default_hvac_bldg_type, default_wwr_bldg_type, default_swh_bldg_type, output_dir, unmet_load_hours, debug) The key function that generates the ASHRAE 90.1 PRM model contains many arguments. Many of them have specific enum values. For a successful generation, these arguments need to match their enum values.\nThis instruction will walk through the argument list, so this API call can be customized for any purpose and building cases.\nThis API function is a primary function to generate baseline models. The process takes a user-created OpenStudio model and several user-defined arguments and produce a PRM baseline model.\nStep 1: Check proposed model graph LR; A(Check proposed model) --\u003e|check severe errors and unmet load hours| B{Decision} B --\u003e|Passed| C(Create four baseline models) B --\u003e|Failed| D(Create one baseline model) The simulation results in this step will be saved in the folder SR_PROP0.\nStep 2: Adjust envelope and internal loads In this step, the function starts adjusting the envelope and internal loads based on the information stored in the method arguments and user-supplied model. In addition, this step also prepares HVAC systems for a sizing run.\ngraph LR; A(Adjust Internal Loads) --\u003e|Remove external shades| B(Shades) A --\u003e|Apply compliacne window to wall ratio| C(WWR) A --\u003e|Apply compliance skylight to root ratio| D(SRR) A --\u003e|Apply compliance lighting power density| E(LPD) A --\u003e|Adjust schedule to handle occupancy sensors| F(Schedule) A --\u003e|Remove daylighting| G(Daylight) A --\u003e|Replace constructions| H(Constructions) A --\u003e|Add HVAC and sizing info| I(HVAC) After all the above is applied, a sizing run is conducted and labeled as SR1 in the output directory.\nStep 3: Fine tune HVAC system parameters 1 Based on the sizing run results in the SR1 folder, this step will fine-tune the HVAC parameters based on the ASHRAE 90.1 appendix G specifications.\ngraph LR; A(HVAC System) --\u003e|Tune baseline air loop fan power| B(Airloop Fans) A --\u003e|Tune baseline zone fan power| C(Zone Fans) A --\u003e|Tune boilers| D(Boilers) A --\u003e|Tune chillers| E(Chllers) A --\u003e|Tune cooling towers| F(CoolingTowers) After all the above steps are completed, a second sizing run is conducted and labeled as SR2 in the output directory. In this run, several key metrics in the HVAC system will be determined, such as the capacity of the chillers and loop flow rates.\nStep 4: Fine tune HVAC system parameters 2 This step further fine-tunes some parameters in the HVAC components. graph LR; A(HVAC Component) --\u003e|Tune component efficiency| B(Efficiency) A --\u003e|Set demand control ventilation| C(DCV) A --\u003e|Tune pump power and controls| D(Pump) A third sizing run is conducted after this step and labeled as SR3 in the output directory. The third sizing run is the final sizing run to refine size-dependent values, including the secondary flow rate in the parallel PIU reheat terminal and the maximum flow rate in the air terminal.\nAfter these four steps, baseline model(s) will be generated in the output directory. The output directory is an argument the user provides when calling this function. In the next section, we will give a detail explanation of these arguments.\n- model model is the OpenStudio model. A typical way to load an OpenStudio model is through the version translator.\nmodel_path = \u0026#39;\\some_path\\some_os_model.osm\u0026#39; translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path).get - climate_zone The climate_zone shall be one of the strings from the list below:\nASHRAE 169-2013-0A ASHRAE 169-2013-0B ASHRAE 169-2013-1A ASHRAE 169-2013-1B ASHRAE 169-2013-2A ASHRAE 169-2013-2B ASHRAE 169-2013-3A ASHRAE 169-2013-3B ASHRAE 169-2013-3C ASHRAE 169-2013-4A ASHRAE 169-2013-4B ASHRAE 169-2013-4C ASHRAE 169-2013-5A ASHRAE 169-2013-5B ASHRAE 169-2013-5C ASHRAE 169-2013-6A ASHRAE 169-2013-6B ASHRAE 169-2013-7A ASHRAE 169-2013-7B ASHRAE 169-2013-8A ASHRAE 169-2013-8B - default_hvac_bldg_type The default_hvac_bldg_type shall be one of the strings in the list below:\nheated only storage hospital public assembly retail other nonresidential residential unconditioned - default_wwr_bldg_type The default_wwr_bldg_type shall be one of the strings in the list below:\nWarehouse (nonrefrigerated) School (secondary and university) School (primary) Retail (strip mall) Retail (stand alone) Restaurant (quick service) Restaurant (full serivce) Office \u0026gt; 50,000 sq ft Office \u0026lt;= 5,000 sq ft Office 5,000 to 50,000 sq ft Hotel/motel \u0026gt; 75 rooms Hotel/motel \u0026lt;= 75 rooms Hospital Healthcare (outpatient) Grocery store All other - default_swh_bldg_type The default_swh_bldg_type shall be one of the strings in the list below:\nWorkshop Warehouse Transportation Town hall Sport arena School/university Retail Religious facility Post office Police station Performing arts theater Penitentiary Parking garage Office Museum Multifamily Motion picture theater Motel Manufacturing facility Library Hotel Hospital and outpatient surgery center Health-care clinic Gymnasium Grocery store Fire station Exercise center Domitory Dining:Family Dining: Cafeteria/fast food Dining: Bar lounge/leisure Courthouse Convention center Convenience store Automotive facility All others - output_dir output_dir is a mandatory field that specifies the directory to save all sizing runs. When applying the PRM method to a proposed model, OSSTD will perform several sizing runs. These sizing runs are usually saved in a directory specified in sizing_run_dir. In addition, the generated baseline model .idf and .osm will also be saved in this directory.\n- unmet_load_hours unmet_load_hours is a flag that checks whether a model can successfully run an annual simulation and whether its annual unmet load hours meet the ASHRAE 90.1 Appendix G requirements. The default value for this flag is true.\nCautious when setting the unmet_load_hours to false. This could result in wrong baseline models or crash the baseline generation process.\n- debug debug default is set to false. This argument has no impact on the current PRM generation and is part of the future implementation. Any API calls set this field to false or ignore this argument.\nconvert_userdata_csv_to_json The function converts user data from CSV format to JSON format, and it is typically called before loading the user data before baseline generation.\nstandard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) userdata_dir = \u0026#34;#{File.dirname(Dir.pwd)}/user_data\u0026#34; output_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # Converts user data from .csv file to .json file json_path = standard.convert_userdata_csv_to_json(userdata_dir, output_dir) The function has two arguments, userdata_dir and output_dir. The process first loads all the default user data templates as json, then grabs all the user CSV files saved in the userdata_dir and inserts data from the csv files into the json data. Lastly, the function saves the json to the output_dir in the user_data_json folder.\n- userdata_dir This argument shall be a valid directory string that points to the folder where all user data csv is saved. An example can be:\n\u0026#34;C:\\\\documents\\\\my_user_data\u0026#34; - output_dir This argument shall be a valid directory string that points to the folder where all user data json is saved. An example can be:\n\u0026#34;C:\\\\documents\\\\user_data_json\u0026#34; load_userdata_to_standards_database The function loads the user data folder into the 90.1-PRM-2019 instance. A typical workflow will call convert_userdata_csv_to_json first to convert all user data from csv to json and then call load_userdata_to_standards_database to load the json into the workflow.\nstandard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) userdata_dir = \u0026#34;#{File.dirname(Dir.pwd)}/user_data\u0026#34; output_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # Converts user data from .csv file to .json file json_path = standard.convert_userdata_csv_to_json(userdata_dir, output_dir) standard.load_userdata_to_standards_database(json_path) json_path shall be a valid directory string that points to the folder where all user data json is saved.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/prm_api_ref/wwr_api/",
	"title": "Window API",
	"tags": [],
	"description": "",
	"content": " Quick use Function workflow How to use Input arguments user_model climate_zone Output values result wwr_info Multi building area type handling Quick Use wwr_building_type = \u0026#34;Office \u0026lt;= 5,000 sq ft\u0026#34; standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) result, wwr_info = standard.model_apply_prm_baseline_window_to_wall_ratio(model, climate_zone=\u0026#39;\u0026#39;, wwr_building_type: wwr_building_type) The above code adjusts the window-to-wall ratio in the model to the specified building type. Each building type maps to a window-to-wall ratio.\nBuilding Area Types Baseline building vertical fenestration percentage of gross-above-grade wall area Grocery store 7% Warehouse (nonrefrigerated) 6% School (secondary and university) 22% School (primary) 22% Retail (strip mall) 20% Retail (stand alone) 11% Restaurant (quick service) 34% Restaurant (full serivce) 24% Office \u0026gt; 50,000 sq ft 40% Office \u0026lt;= 5,000 sq ft 19% Office 5,000 to 50,000 sq ft 31% Hotel/motel \u0026gt; 75 rooms 34% Hotel/motel \u0026lt;= 75 rooms 24% Hospital 27% Healthcare (outpatient) 21% All other 40% The mapping is shown in the above table. Once the function identifies the correct building area, it will apply the window-to-wall ratio to the entire model.\nFunction workflow graph LR; A(Model) --\u003e|Loop| B(Spaces) B --\u003e|Apply building area type| C(BAT) B --\u003e|Surface conditioning category| D{Condition} D --\u003e|Conditioned space| E(Surfaces) C --\u003e|Target WWR| F(Adjust Ratio) E --\u003e|Existing WWR| F(Adjust WWR) How to use As the workflow diagram indicated, the function checks each zone and surface to determine its conditioned type. The conditioned type of a zone is determined after model sizing simulation. Therefore, it is critical to note that this function will only work after a successful full-year simulation or sizing run. To do that, follow the script below before calling the function.\n# Initiate the standard to PRM and load the model (model needs to be v3.4 or lower) standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path).get # Make a copy of the model user_model = BTAP::FileIO.deep_copy(model) # Run annual simulation standard.model_run_simulation_and_log_errors(user_model, run_dir = \u0026#34;#{prototype_dir}/PROP\u0026#34;) # Modify the window to wall ratio. result, wwr_info = standard.model_apply_prm_baseline_window_to_wall_ratio(user_model, climate_zone, wwr_building_type: wwr_building_type) If the model is not simulated, this function can still run. However, it will not apply a target WWR to the model because it cannot find any conditioned surface to adjust WWR.\nFunction behavior It is essential to understand the function behaviors before calling this function.\nIf the target WWR is smaller than the model overall WWR, the function will proportionally reduce the size of every window while keeping their center coordinates fixed If the target WWR is greater than the model overall WWR, the function will: remove all windows in surfaces and add new ones to meet the required WWR. This step will only apply to surfaces that have windows Plenums (including air loop supply and return plenums) are not considered in the WWR expanding algorithm. If surfaces with windows reach a 90% WWR, the total gross WWR of the building is still smaller than the target WWR. The function will create new windows on every other surface to meet the target WWR for the building. The size of new windows should be proportional to their host surface. If there are doors on the surface, the maximum WWR for the surface will readjust to ensure the total fenestration area and doors are 90% of the surface area. Input arguments user_model user_model shall be the OpenStudio model object (OpenStudio::Model::Model) that contains a complete description of a building energy model in .osm format.\nclimate_zone climate_zone is a String data. However, it is no longer used in the ASHRAE 90.1 2019 PRM method, so it is OK to type in an empty string.\nwwr_building_type wwr_building_type is a hash key, and the value shall be user-defined. The default is nil. The wwr_building_type shall be a string taken from the list below:\nWarehouse (nonrefrigerated) School (secondary and university) School (primary) Retail (strip mall) Retail (stand alone) Restaurant (quick service) Restaurant (full serivce) Office \u0026gt; 50,000 sq ft Office \u0026lt;= 5,000 sq ft Office 5,000 to 50,000 sq ft Hotel/motel \u0026gt; 75 rooms Hotel/motel \u0026lt;= 75 rooms Hospital Healthcare (outpatient) Grocery store All other It is important to keep the wwr_building_type string identical to the list above. Otherwise, the function will set the target building WWR to 40%.\nOutput values result The result is a boolean. true indicates a successful generation and false otherwise.\nwwr_info The wwr_info is a hash map that maps the wwr_building_type to its correspondent target wwr, which is applied when altering the model window-to-wall ratio.\n{\u0026#34;Office \u0026lt;= 5,000 sq ft\u0026#34;=\u0026gt;19.0} Multi building area type handling One feature of the PRM routine is the capability of handling multiple building area types in one energy model. For example, if an energy model is simulating a building mixed with retail (strip mall) and offices (\u0026gt;50,000 sq ft). The baseline vertical fenestration percentage requirements differ for these two building area types. Previously, modelers had to manually adjust the generated baseline model to meet the compliance request. In the new workflow, we introduce the user data to handle this situation in the baseline generation runtime.\nCreate user data To do that, we need to create user data. The example we are using is a typical small office model. In this model, we will identify one space as a retail (strip mall) space and the rest are an office (\u0026gt;50,000 sq ft).\nIn this example, we will edit the userdata_space file in a spreadsheet.\nIt is recommended to edit the file in a spreadsheet cause this can avoid any special characters in the string misidentified by the OSSTD-PRM. In this case, Office \u0026gt; 50,000 sq ft can be mis-identified into two columns as Office \u0026gt; 50 and 000 sq ft.\nOnce the user data is set, save the file as a .csv into a user_data folder.\nSet up the script Let\u0026rsquo;s first set up basic data and load the user energy model\n# Set up directories model_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; user_model_dir = \u0026#34;#{File.dirname(Dir.pwd)}/source\u0026#34; user_model_name = \u0026#39;proposed_model.osm\u0026#39; user_data_path = \u0026#34;#{File.dirname(Dir.pwd)}/user_data\u0026#34; # Set up basic parameters climate_zone = \u0026#34;ASHRAE 169-2013-4A\u0026#34; wwr_building_type = \u0026#34;Office \u0026lt;= 5,000 sq ft\u0026#34; # load user model translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(\u0026#34;#{user_model_dir}/#{user_model_name}\u0026#34;).get user_model = BTAP::FileIO.deep_copy(model) # Initialize the standard routine standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) Now we have everything we need, let\u0026rsquo;s load the user data\n# Convert the .csv files into json files and save the json files into model_dir json_path = standard.convert_userdata_csv_to_json(user_data_path, model_dir) # load the user data into standard object instance standard.load_userdata_to_standards_database(json_path) # Add the user data to the user model. standard.handle_multi_building_area_types(user_model, climate_zone, \u0026#39;\u0026#39;, wwr_building_type, \u0026#39;\u0026#39;, {}) The three lines of code above accomplished three goals:\nConvert the .csv files into JSON files and save the JSON files into model_dir Load the user data into a Standard object instance Call the Standard instance to add user data to the user energy model. The above three steps are crucial to the overall process. The function handle_multi_building_area_types() has six arguments. However, in this example, we only focus on the WWR API function. So supplying user_model, climate_zone, and wwr_building_type and setting the other argument to empty values is sufficient for our next step.\nRun window to wall ratio API # Run a simulation standard.model_run_simulation_and_log_errors(user_model, run_dir = \u0026#34;#{prototype_dir}/PROP\u0026#34;) # Adjust window to wall ratio result, wwr_info = standard.model_apply_prm_baseline_window_to_wall_ratio(user_model, climate_zone, wwr_building_type: wwr_building_type) # Save model user_model.save(OpenStudio::Path.new(\u0026#34;#{prototype_dir}/wwr_output.osm\u0026#34;), true) In the above three lines, the Standard first run an annual simulation of the model to ensure the model is correct and produces a sizing script for analyzing the space conditioning category. Then the model_apply_prm_baseline_window_to_wall_ratio function applies the WWR adjustment to the user energy model.\nOpen the model in the OpenStudio Application, and you can see the Perimeter_ZN_2 space is adjusted to 19% WWR, and the rest are adjusted to 40% WWR.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/space/user_data_space/",
	"title": "Space",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_space.csv (745 B) The user_data_space.csv file provides an alternative way to assign Appendix G lighting space types to the model. See model_requirements for additional information on lighting space types and the list of valid entries.\nThe user_data_space.csv file allows the application of multiple lighting space types to a single Space object in the model. Each lighting space type entered into the user_data_space_type.csv file must be paired with a fraction value to indicate the percentage of the floor area for spaces that is to be assigned to that lighting space type.\nFor example, consider a space named CoreOfficeSpace, that contains 25% private office, 50% open office, and 25% corridor. The entries in the user_data_space.csv file would be as follows:\nname num_std_ltg_types std_ltg_type01 std_ltg_type_frac01 std_ltg_type02 std_ltg_type_frac02 std_ltg_type03 std_ltg_type_frac03 CoreOfficeSpace 3 office - enclosed \u0026lt;= 250 sf 0.25 office - open 0.50 corridor - all other 0.25 The resulting baseline will have a weighted average lighting power of the three assigned lighting spacetypes based on the fractions in the table. Spaces not listed in the table will default to the StandardsSpaceType property of the SpaceType object.\nAn error will result if the fractions supplied by the user do not add up to 1.0.\nA similar capability exists for Space Type objects through the user_data_space_type.csv file.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/space/user_data_space_type/",
	"title": "Space type",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_spacetype.csv (723 B) The user_data_space_type.csv file provides an alternative way to assign Appendix G lighting space types to the model. See model_requirements for additional information on lighting space types and the list of valid entries.\nThe user_data_space_type.csv file allows the application of multiple lighting space types to a single SpaceType object in the model. Each lighting space type entered into the user_data_space_type.csv file must be paired with a fraction value to indicate the percentage of the floor area for spaces that is to be assigned to that lighting space type.\nFor example, consider a space type named CoreOffice, that contains 25% private office, 50% open office, and 25% corridor. The entries in the user_data_space_type.csv file would be as follows:\nname num_std_ltg_types std_ltg_type01 std_ltg_type_frac01 std_ltg_type02 std_ltg_type_frac02 std_ltg_type03 std_ltg_type_frac03 CoreOffice 3 office - enclosed \u0026lt;= 250 sf 0.25 office - open 0.50 corridor - all other 0.25 The resulting baseline will have a weighted average lighting power of the three assigned lighting spacetypes based on the fractions in the table. Space types not listed in the table will default to the StandardsSpaceType property of the SpaceType object.\nAn error will result if the fractions supplied by the user do not add up to 1.0.\nA similar capability exists for Space objects through the user_data_space.csv file.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/building_type/user_data_building/",
	"title": "Building",
	"tags": [],
	"description": "",
	"content": " Building building_type_for_hvac building_type_for_swh building_type_for_wwr is_exempt_from_rotations Building User Data CSV File: userdata_building.csv (97 B) The user_data_building.csv contains compliance data for building compliance calculation. A sample of data record is shown below.\nbuilding_type_for_hvac This field is used to determine the baseline model\u0026rsquo;s HVAC system. It can be overwritten at the zone level (see the documentation for user_data_thermal_zone.csv). It should be set to one of the following values that best described the proposed model\u0026rsquo;s building type.\nheated-only storage hospital other nonresidential public assembly residential retail unconditioned building_type_for_swh This field is used to determine the baseline model\u0026rsquo;s service water heating system. It should be set to one of the following values that best described the proposed model\u0026rsquo;s building type.\nAll others Automotive facility Convenience store Convention center Courthouse Dining: Bar lounge/leisure Dining: Cafeteria/fast food Dining: Family Dormitory Exercise center Fire station Grocery store Gymnasium Health-care clinic Hospital and outpatient surgery center Hotel Library Manufacturing facility Motel Motion picture theater Multifamily Museum Office Parking garage Penitentiary Performing arts theater Police station Post office Religious facility Retail School/university Sports arena Town hall Transportation Warehouse Workshop building_type_for_wwr This field is used to determine the baseline model\u0026rsquo;s window-to-wall ratio. It should be set to one of the following values that best described the proposed model\u0026rsquo;s building type.\nAll others Grocery store Healthcare (outpatient) Hospital Hotel/motel \u0026lt;= 75 rooms Hotel/motel \u0026gt; 75 rooms Office 5,000 to 50,000 sq ft Office \u0026lt;= 5,000 sq ft Office \u0026gt; 50,000 sq ft Restaurant (full service) Restaurant (quick service) Retail (stand alone) Retail (strip mall) School (primary) School (secondary and university) Warehouse (nonrefrigerated) is_exempt_from_rotations Set this field to yes if it can be demonstrated to the satisfaction of the rating authority that the building orientation is dictated by site considerations. If it doesn\u0026rsquo;t apply, leave this field blank or set to no.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/building_type/user_data_thermal_zone/",
	"title": "Thermal Zone",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_thermal_zone.csv (114 B) File Name: userdata_thermal_zone.csv name: Name of the thermal zone object in the model.\nbuilding_type_for_hvac This is the building type designation used for determining the Appendix G baseline system type. Valid entries are:\nresidential public assembly heated-only storage retail other nonresidential unconditioned hospital number_of_systems This allows multiple systems to be modeled conceptually in a single thermal zone. This could be used when a single thermal zone in the model is used to represent multiple thermal zones in the actual building. It could also be used for large zones that contain multiple packaged HVAC systems in the actual building design. When the baseline cooling or heating efficiency depends on system capacity, the capacity determined in the baseline sizing run is divided by number_of_systems before the efficiency lookup is performed.\ndcv_exception_thermal_zone This allows the modeler to claim an exception to demand controlled ventilation requirements based on the rules of 90.1 Section 6.4.3.8. If the exception is taken, then DCV will not be included in the baseline, regardless of the outdoor air flow and occupant density.\nA value of \u0026lsquo;True\u0026rsquo; for a given zone indicates an exception applies to the zone. A value of \u0026lsquo;False\u0026rsquo; or no value indicates there is no exception. has_health_safety_night_cycle_exception Appendix G has a general requirement that fans should operate in a cycling mode during unoccupied hours (night cycle). An exception is allowed for spaces that have health or safety mandated minimum ventilation requirements during unoccupied hours.\nA value of \u0026lsquo;True\u0026rsquo; for a given zone indicates an exception applies to the zone. A value of \u0026lsquo;False\u0026rsquo; or no value indicates there is no exception. "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/hvac/user_data_zone_hvac/",
	"title": "Zone HVAC",
	"tags": [],
	"description": "",
	"content": " Zone HVAC Pressure-drop adjustments has_fan_power_credit_fully_ducted has_fan_power_credit_return_or_exhaust_flow_control fan_power_credit_exhaust_treatment has_fan_power_credit_filtration_m9to12 has_fan_power_credit_filtration_m13to15 clean_filter_pressure_drop_for_fan_power_credit_filtration_m16plus fan_power_credit_gas_phase_cleaners fan_power_credit_biosafety fan_power_credit_other_than_coil_runaround has_fan_power_credit_coil_runaround fan_power_credit_evaporative_humidifier_or_cooler has_fan_power_credit_sound_attenuation has_fan_power_credit_exhaust_serving_fume_hoods has_fan_power_credit_lab_or_vivarium_highrise_vertical_duct Zone HVAC User Data CSV File: userdata_zone_hvac.csv (896 B) The user_data_zone_hvac.csv contains compliance data for zone HVAC compliance calculation. A sample of data record is shown below.\nPressure-drop adjustments The following fields can be used to indicate what pressure-drop adjustment devices are present in each zone HVAC object in the proposed model. Each field corresponds to one of the pressure-drop adjustment categories from Table 6.5.3.1-2.\nhas_fan_power_credit_fully_ducted Set this field to the number of return or exhaust systems required by code or accreditation standards to be fully ducted, or systems required to maintain air pressure differentials between adjacent rooms that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_return_or_exhaust_flow_control Set this field to the number of return and/or exhaust airflow control devices that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_exhaust_treatment Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of all exhaust filters, scrubbers, or other exhaust treatment devices that the zone HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_filtration_m9to12 Set this field to the number of MERV 9 through 12 filters that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_filtration_m13to15 Set this field to the number of MERV 13 through 15 filters that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nclean_filter_pressure_drop_for_fan_power_credit_filtration_m16plus Set this field to the sum of the pressure-drop (calculated at 2 times the clean filter pressure-drop at fan system design conditions) of all MERV 16+ filters and electronically enhanced filters that the zone HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_gas_phase_cleaners Set this field to the sum of carbon and other gas-phase air cleaners\u0026rsquo; pressure-drop (at the fan system design conditions) that the zone HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_biosafety Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of biosafety cabinets that the zone HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_other_than_coil_runaround Set this field to the number of energy recovery devices other than coil runaround loop that the zone HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_coil_runaround Set this field to the number of runaround loop that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_evaporative_humidifier_or_cooler Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of the evaporative humidifier or cooler that the zone HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_sound_attenuation Set this field to the number of sound attenuation sections of fans serving spaces with design background noise goals below NC35 that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_exhaust_serving_fume_hoods Set this field to the number of exhaust systems serving fume hoods that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_lab_or_vivarium_highrise_vertical_duct Set this field to the number of laboratory and vivarium exhaust systems in high-rise buildings that the zone HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/hvac/user_data_zone_infiltration/",
	"title": "Zone Infiltration",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_zone_infiltration.csv (19 B) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/hvac/user_data_airloop_hvac/",
	"title": "Airloop HVAC",
	"tags": [],
	"description": "",
	"content": " Airloop HVAC Pressure-drop adjustments has_fan_power_credit_fully_ducted has_fan_power_credit_return_or_exhaust_flow_control fan_power_credit_exhaust_treatment has_fan_power_credit_filtration_m9to12 has_fan_power_credit_filtration_m13to15 clean_filter_pressure_drop_for_fan_power_credit_filtration_m16plus fan_power_credit_gas_phase_cleaners fan_power_credit_biosafety fan_power_credit_other_than_coil_runaround has_fan_power_credit_coil_runaround fan_power_credit_evaporative_humidifier_or_cooler has_fan_power_credit_sound_attenuation has_fan_power_credit_exhaust_serving_fume_hoods has_fan_power_credit_lab_or_vivarium_highrise_vertical_duct Air-side economizer economizer_exception_for_gas_phase_air_cleaning economizer_exception_for_open_refrigerated_cases Exhaust air energy recovery exhaust_energy_recovery_exception_for_toxic_fumes_etc exhaust_energy_recovery_exception_for_type1_kitchen_hoods exhaust_energy_recovery_exception_for_type_distributed_exhaust exhaust_energy_recovery_exception_for_dehumidifcation_with_series_cooling_recovery Airloop HVAC User Data CSV File: userdata_airloop_hvac.csv (988 B) The user_data_airloop_hvac.csv contains compliance data for airloop HVAC compliance calculation. A sample of data record is shown below.\nPressure-drop adjustments The following fields can be used to indicate what pressure-drop adjustment devices are present in each airloop HVAC object in the proposed model. Each field corresponds to one of the pressure-drop adjustment categories from Table 6.5.3.1-2.\nhas_fan_power_credit_fully_ducted Set this field to the number of return or exhaust systems required by code or accreditation standards to be fully ducted, or systems required to maintain air pressure differentials between adjacent rooms that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_return_or_exhaust_flow_control Set this field to the number of return and/or exhaust airflow control devices that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_exhaust_treatment Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of all exhaust filters, scrubbers, or other exhaust treatment devices that the airloop HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_filtration_m9to12 Set this field to the number of MERV 9 through 12 filters that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_filtration_m13to15 Set this field to the number of MERV 13 through 15 filters that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nclean_filter_pressure_drop_for_fan_power_credit_filtration_m16plus Set this field to the sum of the pressure-drop (calculated at 2 times the clean filter pressure-drop at fan system design conditions) of all MERV 16+ filters and electronically enhanced filters that the airloop HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_gas_phase_cleaners Set this field to the sum of carbon and other gas-phase air cleaners\u0026rsquo; pressure-drop (at the fan system design conditions) that the airloop HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_biosafety Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of biosafety cabinets that the airloop HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_other_than_coil_runaround Set this field to the number of energy recovery devices other than coil runaround loop that the airloop HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_coil_runaround Set this field to the number of runaround loop that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_evaporative_humidifier_or_cooler Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of the evaporative humidifier or cooler that the airloop HVAC object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_sound_attenuation Set this field to the number of sound attenuation sections of fans serving spaces with design background noise goals below NC35 that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_exhaust_serving_fume_hoods Set this field to the number of exhaust systems serving fume hoods that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_lab_or_vivarium_highrise_vertical_duct Set this field to the number of laboratory and vivarium exhaust systems in high-rise buildings that the airloop HVAC object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nAir-side economizer The following fields can be used to indicate special design consideration regarding air-side economizer that cannot be inferred from the proposed model. These are used by the software to determine if an airloop HVAC object complies with the certain exceptions of Section G3.1.2.6.\neconomizer_exception_for_gas_phase_air_cleaning Set this field to yes if the airloop HVAC object include gas-phase air cleaning to meet the requirements of Standard 62.1, Section 6.1.2. If it doesn\u0026rsquo;t apply leave this field blank or set to no.\neconomizer_exception_for_open_refrigerated_cases Set this field to yes where the use of outdoor air for cooling by the airloop HVAC object would affect supermarket open refrigerated case-work systems. If it doesn\u0026rsquo;t apply leave this field blank or set to no.\nExhaust air energy recovery The following fields can be used to indicate special design consideration regarding air energy recovery that cannot be inferred from the proposed model. These are used by the software to determine if an airloop HVAC object complies with the certain exceptions of Section G3.1.2.10.\nexhaust_energy_recovery_exception_for_toxic_fumes_etc Set this field to yes if the airloop HVAC object is exhausting toxic, flammable, or corrosive fumes or paint or dust. If it doesn\u0026rsquo;t apply leave this field blank or set to no.\nexhaust_energy_recovery_exception_for_type1_kitchen_hoods Set this field to yes if the airloop HVAC object includes commercial kitchen hoods (grease) classified as Type 1 by NFPA 96. If it doesn\u0026rsquo;t apply leave this field blank or set to no.\nexhaust_energy_recovery_exception_for_type_distributed_exhaust Set this field to yes when the airloop HVAC object\u0026rsquo;s largest exhaust source is less than 75% of the design outdoor airflow. If it doesn\u0026rsquo;t apply leave this field blank or set to no.\nexhaust_energy_recovery_exception_for_dehumidifcation_with_series_cooling_recovery Set this field to yes when the airloop HVAC object is requiring dehumidification that employ energy recovery in series with the cooling coil. If it doesn\u0026rsquo;t apply leave this field blank or set to no.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/hvac/user_data_airloop_hvac_doas/",
	"title": "Airloop HVAC DOAS",
	"tags": [],
	"description": "",
	"content": " Airloop HVAC DOAS Pressure-drop adjustments has_fan_power_credit_fully_ducted has_fan_power_credit_return_or_exhaust_flow_control fan_power_credit_exhaust_treatment has_fan_power_credit_filtration_m9to12 has_fan_power_credit_filtration_m13to15 clean_filter_pressure_drop_for_fan_power_credit_filtration_m16plus fan_power_credit_gas_phase_cleaners fan_power_credit_biosafety fan_power_credit_other_than_coil_runaround has_fan_power_credit_coil_runaround fan_power_credit_evaporative_humidifier_or_cooler has_fan_power_credit_sound_attenuation has_fan_power_credit_exhaust_serving_fume_hoods has_fan_power_credit_lab_or_vivarium_highrise_vertical_duct Airloop HVAC DOAS User Data CSV File: userdata_airloop_hvac_doas.csv (611 B) The user_data_airloop_hvac_doas.csv contains compliance data for airloop HVAC DOAS compliance calculation. A sample of data record is shown below.\nPressure-drop adjustments The following fields can be used to indicate what pressure-drop adjustment devices are present in each airloop HVAC DOAS object in the proposed model. Each field corresponds to one of the pressure-drop adjustment categories from Table 6.5.3.1-2.\nhas_fan_power_credit_fully_ducted Set this field to the number of return or exhaust systems required by code or accreditation standards to be fully ducted, or systems required to maintain air pressure differentials between adjacent rooms that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_return_or_exhaust_flow_control Set this field to the number of return and/or exhaust airflow control devices that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_exhaust_treatment Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of all exhaust filters, scrubbers, or other exhaust treatment devices that the airloop HVAC DOAS object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_filtration_m9to12 Set this field to the number of MERV 9 through 12 filters that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_filtration_m13to15 Set this field to the number of MERV 13 through 15 filters that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nclean_filter_pressure_drop_for_fan_power_credit_filtration_m16plus Set this field to the sum of the pressure-drop (calculated at 2 times the clean filter pressure-drop at fan system design conditions) of all MERV 16+ filters and electronically enhanced filters that the airloop HVAC DOAS object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_gas_phase_cleaners Set this field to the sum of carbon and other gas-phase air cleaners\u0026rsquo; pressure-drop (at the fan system design conditions) that the airloop HVAC DOAS object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_biosafety Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of biosafety cabinets that the airloop HVAC DOAS object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_other_than_coil_runaround Set this field to the number of energy recovery devices other than coil runaround loop that the airloop HVAC DOAS object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_coil_runaround Set this field to the number of runaround loop that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nfan_power_credit_evaporative_humidifier_or_cooler Set this field to the sum of the pressure-drop (calculated at fan system design conditions) of the evaporative humidifier or cooler that the airloop HVAC DOAS object includes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_sound_attenuation Set this field to the number of sound attenuation sections of fans serving spaces with design background noise goals below NC35 that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_exhaust_serving_fume_hoods Set this field to the number of exhaust systems serving fume hoods that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\nhas_fan_power_credit_lab_or_vivarium_highrise_vertical_duct Set this field to the number of laboratory and vivarium exhaust systems in high-rise buildings that the airloop HVAC DOAS object includes. If the number is 1, the field can also be set to yes. If it doesn\u0026rsquo;t apply, leave this field blank or set to 0.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/hvac/user_data_design_specification_outdoor_air/",
	"title": "Outdoor Air",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_design_specification_outdoor_air.csv (122 B) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/equipment/user_data_electric_equipment/",
	"title": "Electric Equipment",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_electric_equipment.csv (411 B) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/equipment/user_data_gas_equipment/",
	"title": "Gas Equipment",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_gas_equipment.csv (65 B) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/lighting/user_data_lights/",
	"title": "Lights",
	"tags": [],
	"description": "",
	"content": " Lights has_retail_display_exception has_unregulated_exception unregulated_category Lights User Data CSV File: userdata_lights.csv (81 B) The user_data_lights.csv contains compliance data for lights compliance calculation. A sample of data record is shown below.\nhas_retail_display_exception Set this field to yes if the lights object qualifies as display lighting: the lighting must be specifically designed and directed to highlight merchandise and separately controlled from the general lighting. If it doesn\u0026rsquo;t apply, leave this field blank or set to no.\nhas_unregulated_exception Set this field to yes if the lights object qualifies as unregulated lighting. If it doesn\u0026rsquo;t apply, leave this field blank or set to no. The following lighting system are considered unregulated.\nDisplay or accent lighting that is an essential element for the function performed in galleries, museums, and - uments. Lighting that is integral to equipment or instrumentation and is installed by its manufacturer. Lighting specifically designed for use only during medical or dental procedures and lighting integral to - ical equipment. Lighting integral to both open and glass-enclosed refrigerator and freezer cases. Lighting integral to food warming and food preparation equipment. Lighting specifically designed for the life support of nonhuman life forms. Lighting in retail display windows, provided the display area is enclosed by ceiling-height partitions. Lighting in interior spaces that have been specifically designated as a registered interior historic landmark. Lighting that is an integral part of advertising or directional signage. Exit signs. Lighting that is for sale or lighting educational demonstration systems. Lighting for theatrical purposes, including performance, stage, and film and video production. Lighting for television broadcasting in sporting activity areas. Casino gaming areas. Furniture-mounted supplemental task lighting that is controlled by automatic shutoff and complies with - ndard 90.1-2019 Section 9.4.1.3(c). Mirror lighting in dressing rooms and accent lighting in religious pulpit and choir areas. Parking garage transition lighting—lighting for covered vehicle entrances and exits from buildings and parking structures—that complies with Standard 90.1-2019 Section 9.4.1.2(a) and 9.4.1.2(c); each transition zone shall not exceed a depth of 66 ft inside the structure and a width of 50 ft. unregulated_category This field is used to inform the code reviewer about which category of unregulated lighting the model represented. It does not affect the baseline building generation.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/lighting/user_data_exterior_lights/",
	"title": "Exterior Lights",
	"tags": [],
	"description": "",
	"content": " Exterior Lights end_use_subcategory Tradeable Exterior Lighting Subcategories Non-Tradeable Exterior Lighting Subcategories end_use_measurement_value Exterior Lights User Data CSV File: userdata_exterior_lights.csv (467 B) The user_data_exterior_lights.csv contains compliance data for exterior lighting compliance calculation. A sample of data record is shown below.\nend_use_subcategory Each exterior lights object in the model can be assigned up to nine exterior lighting subcategories in the user data file based on Appendix G Table G3.6. The lighting subcategories are designated by the labels:\nend_use_subcategory_01 through end_use_subcategory_09\nIn order to work with the Appendix G code database, the following subcategory names must be used in the user data file:\nTradeable Exterior Lighting Subcategories parking_lots_and_drives_area\nwalkways_less_than_10_ft_wide_perim\nwalkways_10_ft_wide_or_greater_area\nplaza_areas_area\nspecial_feature_areas_area\nstairways_area\nmain_entries_area\nother_doors_perim\ncanopies_area\nopen_areas_including_vehicle_sales_lots_area\nstreet_frontage_for_vehicle_sales_perim\nNon-Tradeable Exterior Lighting Subcategories nontradeable_general_qty\nbuilding_facades_area\nbuilding_facades_perim\nautomated_teller_machines_per_location_qty\nautomated_teller_machines_per_machine_qty\nentries_and_gates_area\nloading_areas_for_emergency_vehicles_area\ndrive_through_windows_and_doors_qty\nparking_near_24_hour_entrances_qty\nroadway_parking_qty\nIt is critical to use the identical string in the above list. Failure to match the list could result erroneous data in the PRM model.\nend_use_measurement_value For each subcategory, the appropriate quantity must also be listed, as designated by:\nend_use_measurement_value_01 through end_use_measurement_value_09\nThe units of the measurement value are indicated by the last part of the subcategory name:\narea = area in square feet\nperim = perimeter length in linear feet\nqty = integer quantity of items\nNote: the measurement values in the user data table need to be the total quantities for the applicable exterior lights object (accounting for any multipliers). If there is a multiplier in the object, it will be changed to \u0026lsquo;1\u0026rsquo; for the baseline model.\nCredit can only be taken for exterior lights that are classified as tradeable. Thus, each exterior lighting object in the model must be configured to represent either only tradeable or only non-tradeable subcategories. If any non-tradeable subcategories are included, the entire object will be treated as non-tradeable for the baseline.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/water/user_data_wateruse_connections/",
	"title": "Water Connections",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_wateruse_connections.csv (82 B) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/water/user_data_wateruse_equipment/",
	"title": "Water Equipment",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_wateruse_equipment.csv (22 B) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/water/user_data_wateruse_equipment_definition/",
	"title": "Water Equip Definition",
	"tags": [],
	"description": "",
	"content": " User Data CSV File: userdata_wateruse_equipment_definition.csv (76 B) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Create ASHRAE 90.1-2019 PRM Model The OpenStudio Standard \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure is a tool to support energy model automation for ASHRAE 90.1 Appendix G performance rating method compliance evaluation.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]