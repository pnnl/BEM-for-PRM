[
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/",
	"title": "Overview",
	"tags": [],
	"description": "",
	"content": "Chapter 1 What is OSSTD-PRM The \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure provides a tool to automatically generate the baseline model according to the rules of the 2019 version of the ASHRAE 90.1 Appendix G Performance Rating Method.\nSince Appendix G began using a \u0026ldquo;stable baseline\u0026rdquo; approach beginning with the 2016 version, the 2019 baseline will be nearly the same as the 2016 version. Some differences are outlined here.\nAt this time, only a Baseline model is created by the tool. A future version is planned that will also create a Proposed model.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/",
	"title": "Getting Started",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Get Started Start using OpenStudio Standard PRM method in your compliance modeling workflow\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/",
	"title": "User Guide",
	"tags": [],
	"description": "",
	"content": "Chapter 3 PRM Method User Guide A detail user guide to walk through API methods in the PRM method\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/temp_web_dev_guide/",
	"title": "Temp web development guide",
	"tags": [],
	"description": "",
	"content": "Chapter 4 Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/capabilities/",
	"title": "Key Capabilities",
	"tags": [],
	"description": "",
	"content": "The \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure provides a detailed implementation of the rules of the Appendix G Performance Rating Method. Below are some of the key changes that are applied by the tool when creating the Baseline model:\nApply baseline envelope rules Space conditioning type Constructions Insulation levels Window-to-wall ratio Skylight-to-roof ratio Infiltration Apply baseline lighting rules Lighting power Lighting occupancy sensor control Determine and create baseline HVAC systems Remove user model HVAC Determine baseline HVAC based on building type and Appendix G rules Create new baseline HVAC systems Apply special rules for computer rooms and laboratories Size HVAC systems Appl HVAC efficiencies Apply fan power adjustments Apply baseline HVAC controls Rotate building model through cardinal directions Check for unmet load hours and rectify, if needed Handle additional compliance data Multiple building types Plug load measures Elevators Exterior lighting Interior lighting exceptions Number of systems per zone "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/overview/limitations/",
	"title": "Limitations",
	"tags": [],
	"description": "",
	"content": "Some features of 90.1-2019 Appendix G that have not yet been implemenented into the baseline automation are as follows:\nBaseline humidification is same as user model in the current tool. In some cases the baseline is required to be changed to adiabatic humidification. This has not been implemented. Baseline dehumidification is same as user model in the current tool. For constant volume systems, Appendix G indicates that only 25% of the system reheat energy shall be included in the budget building performance. This is not yet implemented, and must be handled via post-processing or an EMS applied to the Baseline model. Baseline transformer efficiencies have not been implemented. Where service water heater systems in the user model are comprised of multiple distributed systems, the Appendix G model is required to use a single central system. The conversion to a central system has not yet been implemented. For models where design ventilation rates are greater than that required by code, then the rules of Appendix G state that the Baseline ventilation rate shall be based on the building code, and will be lower than the user model. The ability to model this difference has not yet been implemented. Some Appendix G requirements for district energy systems have not yet been implemented. Efficiency requirements for motors serving miscellaneous electrical equipment have not yet been implemented. Efficiency requirements for commercial refrigeration equipment have not yet been implemented. The baseline requirement has not yet been implemented where lab exhaust fans must be modeled as constant horsepower, reflecting constant-volume stack discharge with outdoor air bypass. The rules of the 2016 version of 90.1 Appendix G are very similar to the 2019 version. Some differences are as follows:\nIn 2016, if Proposed model has combined space/SWH system, the Baseline shall use separate systems. In 2019, a single central SWH system is to be used. This is similar, but maybe not identical to the 2016 version. The 2019 version has rules to allow credit for receptacle control, which are not present in the 2016 version. In 2016, the infiltration leakage rate is the same in Proposed and Baseline, at 0.4 cfm/sf at 0.3 in water. In 2019, the Proposed model is specified as 0.6 cfm/sf and the Baseline is at 1.0 cfm/sf at 0.3 in water. "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/quick_start/",
	"title": "Quick start",
	"tags": [],
	"description": "",
	"content": "Chapter 2.1 Quick Start 10 minutes to OSSTD-PRM automation "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/",
	"title": "Use with OpenStudio App",
	"tags": [],
	"description": "",
	"content": "Use with OpenStudio Application One way to use the Create ASHRAE 90.1-2019 PRM Model is as an add-in measure to the OpenStudio Application.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/",
	"title": "Use with OpenStudio Engine",
	"tags": [],
	"description": "",
	"content": "Chapter 2.3 Use with OpenStudio Engine This tutorial introduces scripting method of using OpenStudio Standard PRM in combination with OpenStudio engine.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/model_requirements/",
	"title": "Model requirements",
	"tags": [],
	"description": "",
	"content": "Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/",
	"title": "Add compliance data",
	"tags": [],
	"description": "",
	"content": " userdata_airloop_hvac.csv userdata_airloop_hvac_doas.csv userdata_building.csv userdata_design_specification_outdoor_air.csv userdata_electric_equipment.csv userdata_exterior_lights.csv userdata_gas_equipment.csv userdata_lights.csv userdata_space.csv userdata_spacetype.csv userdata_thermal_zone.csv userdata_wateruse_connections.csv userdata_wateruse_equipment.csv userdata_wateruse_equipment_definition.csv userdata_zone_hvac.csv userdata_zone_infiltration.csv "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/prm_api_ref/",
	"title": "PRM API Reference",
	"tags": [],
	"description": "",
	"content": "Chapter 3.3 PRM API Reference A detail API reference to walk through functions in the OpenStudio Standard PRM method.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/temp_web_dev_guide/dev_instruction/",
	"title": "Dev_instruction",
	"tags": [],
	"description": "",
	"content": "Image Images uses relative links to the local images folder (in the same level as the markdown file). A preceding exclamation point is needed.\n![PNNL Campus](/BEM-for-PRM/basics/images/PNNL_campus.jpg) You can adjust the image size by using the css width and/or height to the link image.\n![PNNL Campus](/BEM-for-PRM/basics/images/PNNL_campus.jpg?width=200px) And add CSS (border) to it\n![PNNL Campus](/BEM-for-PRM/basics/images/PNNL_campus.jpg?width=200px\u0026amp;classes=border) Tips/Notes/Warnings Note A notice disclaimer\nCode # Template method for adding a setpoint manager for a coil control logic to a heating coil. # ASHRAE 90.1-2019 Appendix G. # # @param model [OpenStudio::Model::Model] Openstudio model # @param thermalZones Array([OpenStudio::Model::ThermalZone]) thermal zone array # @param coil Heating Coils # @return [Boolean] true def model_set_central_preheat_coil_spm(model, thermalZones, coil) return true end "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/where_os_app/",
	"title": "Get OpenStudio",
	"tags": [],
	"description": "",
	"content": "Get The OpenStudio Application The OpenStudio application can be found on the github page for the OpenStudio Coalition. The application provides a graphical user interface to the OpenStudio engine, and the engine is included in the download package.\nhttps://github.com/openstudiocoalition/OpenStudioApplication/releases\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/where_os_measure/",
	"title": "Install the measure",
	"tags": [],
	"description": "",
	"content": "Where to find OSSTD create baseline measure and how to install From the OpenStudio Application interface, select Components \u0026amp; Measures from the menu at the top. Search for \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; Select the \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure in the search result, and select Download Close the intall measure window "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_app/how_run_measure/",
	"title": "Run the measure",
	"tags": [],
	"description": "",
	"content": "How to run the measure Before running the measure, review the model requirements in: Model Requirements\nSelect \u0026ldquo;Components \u0026amp; Measures\u0026rdquo; from the top menu in the screen Select Whole Building/ Space Types in the Apply Measure window Click the arrow next to Space types to show available measures Select the \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure Make selections in the right-hand side of the window as needed Click on the Apply Measure at the bottom of the screen "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/installation/",
	"title": "Installation",
	"tags": [],
	"description": "",
	"content": "This instruction provides all you need to get OpenStudio Standard PRM installed on your local computer for scripting with OpenStudio API.\nDownload Ruby Download OpenStudio Connect Ruby with OpenStudio Download OpenStudio Standard You will need following applications to ensure OpenStudio Standard running on your project.\nDownload Ruby Ruby 2.7. Latest stable version is 2.7.6 and it can be downloaded at: https://cache.ruby-lang.org/pub/ruby/2.7/ruby-2.7.6.tar.gz\nFollow the installation guide to complete the ruby installation. You can also verify the ruby installation with the following command in command line:\nC:\\Users\\sample_user\u0026gt;ruby -v ruby 2.7.4p191 (2021-07-07 revision a21a3b7d23) [x64-mingw32] Download OpenStudio OpenStudio 3.2. The latest stable 3.2 version is 3.2.1 and it can be downloaded at: https://github.com/NREL/OpenStudio/releases/tag/v3.2.1\nMore recent version of OpenStudio can be found in the OpenStudio release link: https://github.com/NREL/OpenStudio/releases. The PRM is tested against v3.4 and lower.\nImportnat Note: The PRM routine in the OpenStudio Standard is tested against v3.4. However, the OpenStudio Standard is only tested on v3.2.1 or lower.\nConnect Ruby to OpenStudio Once you have both Ruby and OpenStudio installed, the next thing is to connect OpenStudio with Ruby.\nStep 1: navigate to ruby installation directory and find the site_ruby folder. In Windows, it should be a directory like this: C:\\Ruby27-x64\\lib\\ruby\\site_ruby Step 2: create a new ruby file called openstudio.rb under the site_ruby folder. Step 3: open the openstudio.rb file and add one line:\nrequire \u0026#34;C:/[Openstudio directory]/Ruby/openstudio.rb\u0026#34; The directory shall be pointing to the openstudio.rb file under the OpenStudio installation folder. Revise the directory after require based on your actual installation directory.\nYou can verify the setting with the following command in command line.\nC:\\Users\\smaple_user\u0026gt; irb irb(main):001:0\u0026gt; require \u0026#34;openstudio\u0026#34; =\u0026gt; true Return true verifies a success on your local setup. Download OpenStudio Standard Now we can create a new ruby project that is going to use the OpenStudio Standard package.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/call_use_api/",
	"title": "Call measure via API",
	"tags": [],
	"description": "",
	"content": "This instruction will give an quick overview of the API method that generates baseline model(s) from a provided openstudio model.\nCreate stable baseline building API User data Baseline outputs Create stable baseline building API The ASHRAE 90.1-2019 PRM automation can be called in a Ruby script via its API method. The API method provides great flexibility for creating customized modeling workflow. For example:\nrequire `openstudio` require `openstudio-standard` model_path = \u0026#39;C:\\demo\\output\\\\\u0026#39; save_path = \u0026#39;C:\\demo\\source\\\\\u0026#39; base_model = \u0026#39;test_model.osm\u0026#39; modified_model = \u0026#39;modified_model_demo.osm\u0026#39; translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path + base_model).get # Adjust window to wall ratio to 60% model.getSurfaces.each do |ss| unless ss.subSurfaces.empty? orig_construction = ss.subSurfaces[0].construction.get ss.subSurfaces.sort.each(\u0026amp;:remove) new_window = ss.setWindowToWallRatio(0.6, 0.8, true).get new_window.setConstruction(orig_construction) end end # Add overhangs on south facade. model.getSubSurfaces.each do |s| absoluteAzimuth = OpenStudio.convert(s.azimuth, \u0026#39;rad\u0026#39;, \u0026#39;deg\u0026#39;).get + s.space.get.directionofRelativeNorth + model.getBuilding.northAxis absoluteAzimuth -= 360.0 until absoluteAzimuth \u0026lt; 360.0 next if !((absoluteAzimuth \u0026gt;= 135.0) \u0026amp;\u0026amp; (absoluteAzimuth \u0026lt; 225.0)) new_overhang = s.addOverhangByProjectionFactor(0.8, 0) end # Build the standard PRM routine standard = Standard.build(\u0026#39;90.1-PRM-2019\u0026#39;) baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; hvac_bldg_type = \u0026#39;other nonresidential\u0026#39; wwr_bldg_type = \u0026#39;Office \u0026lt;= 5,000 sq ft\u0026#39; swh_bldg_type = \u0026#39;Office\u0026#39; standard.model_create_prm_stable_baseline_building(model, climate_zone, hvac_bldg_type, wwr_bldg_type, swh_bldg_type, baseline_dir, run_all_orients=false, unmet_load_hours_check=true, debug=false) What the script above did was:\nLoad an OSM model - it could be any model created as a proposed model for creating baseline system. Make adjustments to the model: Change the window to wall ratio to 60% (adding a span glazings on every wall) Add overhangs to the south facade of the model. General the baseline model by calling the API method. In the end of the script, the standard object calls a function model_create_prm_stable_baseline_building is the API function that generates the baseline model.\nstandard.model_create_prm_stable_baseline_building(model, climate_zone, hvac_bldg_type, wwr_bldg_type, swh_bldg_type, baseline_dir, run_all_orients=false, unmet_load_hours_check=true, debug=false) A detail description of the arguments can be found in the API document.\nUser data In PRM routines, there is one additional step that allows user to adds code compliance specific data to the baseline generation workflow. Data that is missing in most of the building energy models such as space type for a space, lighting space type for a space lighting, or motor horsepower for a electric equipment can be added to the user data before calling the API. The use of the user data can be find in Add compliance data section.\n# Create PRM object standard = Standard.build(\u0026#39;90.1-PRM-2019\u0026#39;) baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # Converts user data from .csv file to .json file json_path = standard.convert_userdata_csv_to_json(\u0026#34;#{File.dirname(Dir.pwd)}/user_data\u0026#34;, \u0026#34;#{baseline_dir}\u0026#34;) # Load the user data json files into the PRM routine. standard.load_userdata_to_standards_database(json_path) # Generate baseline standard.model_create_prm_stable_baseline_building(model, climate_zone, hvac_bldg_type, wwr_bldg_type, swh_bldg_type, baseline_dir, run_all_orients=false, unmet_load_hours_check=true, debug=false) The above script first create the PRM object from OpenStudio Standards, then converts the data from csv to json and load them into the object before generating the baseline. It is important to convert the csv to json first before loading them to the PRM object. The API documents gives a more detail description of the function convert_userdata_csv_to_json and load_userdata_to_standards_database.\nBaseline outputs A successful baseline generation creates a number of baseline model(s) and folders under the baseline_dir as shown in the image below. SR_[NUMBER]: A number of folders are generated in the process and saved in the baseline_dir. They typically starts with SR_ and ends with a number or PROP. These folders contains the energy model and their sizing run outputs. The number records the index of the the sizing run. PROP indicates that this is a sizing run on a proposed model. A more detail description of the baseline generation steps is described in the API document.\nuser_data_json: The user_data_json saves all user defined data in JSON format. The list includes the full set of the user data regardless there is data or not.\nfinal.osm: A baseline openstudio model at 0 rotation degree.\nfinal_NUM.idf: Depending on whether the baseline model case meets the G3.1(5).a building rotation requirements, the baseline generation produces one or four EnergyPlus files. If no rotations, then the folder only contain one final.idf else, there are final_0.idf, final_90.idf, final_180.idf and final_270.idf.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/os_engine/link_api_doc/",
	"title": "API documentation",
	"tags": [],
	"description": "",
	"content": "The description of PRM API methods can be found in this API document.\nIn addition, the PRM method is a subroutine under the package of OpenStudio Standard project. Therefore, OpenStudio Standard API methods can be accessed from the same routine. For example:\nrequire \u0026#39;openstudio\u0026#39; require \u0026#39;openstudio-standard\u0026#39; standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path + base_model).get standard.model_remove_prm_hvac(model) standard.model_remove_prm_ems_objects(model) thermal_zones = [] model.getThermalZones.each do |zone| thermal_zones.append(zone) end end # Hot water loop hot_water_loop = standard.model_add_hw_loop(model, \u0026#39;NaturalGas\u0026#39;) # Heat pump loop condenser_loop = standard.model_get_or_add_heat_pump_loop(model, \u0026#39;Electricity\u0026#39;, \u0026#39;Electricity\u0026#39;, heat_pump_loop_cooling_type:\u0026#39;CoolingTower\u0026#39;) standard.model_add_water_source_hp(model, thermal_zones, condenser_loop, ventilation: true) standard.model_add_doas(model, thermal_top_zones, system_name: \u0026#39;DOAS TOP System\u0026#39;, doas_type: \u0026#39;DOASCV\u0026#39;, hot_water_loop: hot_water_loop, chilled_water_loop: nil) The code above loads a model, removes the existing HVAC systems, and calls the OpenStudio Standard methods to add a water source heat pump system.\nHowever, the use of those functions is out of the scope of this documentation. Using those functions shall always refer to the official OpenStudio Standard API documentation.\nThe PRM routine also can be used to work with OpenStudio APIs. The access to the OpenStudio API documentation can be found in the OpenStudio official website.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/quick_start/create_typical/",
	"title": "Create a typical model",
	"tags": [],
	"description": "",
	"content": "Create a typical model OpenStudio Standard package embedded code to generate OpenStudio version of prototype buildings. This quick tutorial will create a typical building and run the ASHRAE 90.1-2019 Appendix G (PRM) automation process.\nTo begin with, we need to import both packages.\nrequire \u0026#39;openstudio\u0026#39; require \u0026#39;openstudio-standard\u0026#39; You can use require_relative [ABSOLUTE_PATH] to import the OSSTD source code if you choose to use the package from Github.\nNext, we want to create a MediumOffice prototype building in climate zone 4A (New York) that is designed following the 90.1 2019 standard. Before doing that, we will need to define these parameters.\ncode_version = \u0026#39;90.1-2019\u0026#39; prototype_template = \u0026#39;MediumOffice\u0026#39; climate_zone = \u0026#39;ASHRAE 169-2013-4A\u0026#39; epw_file = \u0026#39;USA_NY_New.York-J.F.Kennedy.Intl.AP.744860_TMY3.epw\u0026#39; prototype_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # path where the generated prototype saved. The next step is to generate the typical medium office model\nstandard = Standard.build(\u0026#34;#{code_version}_#{prototype_template}\u0026#34;) model = standard.model_create_prototype_model(climate_zone, epw_file, prototype_dir) The first line loads a specific OpenStudio Standard object based on the code version (90.1-2019) and the prototype template (MediumOffice). The second line calls model_create_prototype_model method from the object with arguments include climate_zone, epw_file and prototype_dir to create the prototype model. This method will create a path in the computer to store the draft prototype model and sizing run of the model. Then it will fine-calibrate the model based on the sizing outcome to produce the final version, which is the returned value from this method.\nLast, we can save the generated prototype model to a directory and view it in the OpenStudio Application.\nThe full script of this part of the tutorial is provided below:\nrequire \u0026#39;openstudio\u0026#39; # This imports the source code of the openstudio standard. If OSSTD is installed in GEM, then simply # use require \u0026#39;openstudio-standards\u0026#39; require_relative File.join(\u0026#39;..\u0026#39;,\u0026#39;..\u0026#39;,\u0026#39;..\u0026#39;, \u0026#39;OSSTD_Repo\u0026#39;,\u0026#39;lib\u0026#39;,\u0026#39;openstudio-standards.rb\u0026#39;) code_version = \u0026#39;90.1-2019\u0026#39; prototype_template = \u0026#39;MediumOffice\u0026#39; climate_zone = \u0026#39;ASHRAE 169-2013-4A\u0026#39; epw_file = \u0026#39;C:\\WeatherData\\USA_NY_New.York-J.F.Kennedy.Intl.AP.744860_TMY3.epw\u0026#39; prototype_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; standard = Standard.build(\u0026#34;#{code_version}_#{prototype_template}\u0026#34;) model = standard.model_create_prototype_model(climate_zone, epw_file, prototype_dir) # Save prototype OSM file osm_path = OpenStudio::Path.new(\u0026#34;#{prototype_dir}/test_model.osm\u0026#34;) model.save(osm_path, true) Next, we will write a script to automatically generate ASHRAE 90.1 Appendix G (PRM) model from the generated prototype model. Click the Next button at the right edge to start the script.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/quick_start/baseline_automation/",
	"title": "Baseline automation",
	"tags": [],
	"description": "",
	"content": "This quick tutorial will generate an ASHRAE 90.1-2019 Appendix G baseline from a medium office prototype.\nIn the previous step, we created a medium office prototype model in Climate zone 4. In this section, let\u0026rsquo;s write the script to generate a baseline for this prototype building. First, we need to import openstudio and openstudio-standards packages.\nrequire \u0026#39;openstudio\u0026#39; require \u0026#39;openstudio-standard\u0026#39; Next, load the model and prepare compliance parameters for baseline generation.\n# Load the openstudio model model_path = \u0026#34;#{File.dirname(Dir.pwd)}/output_baseline/test_model.osm\u0026#34; translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loaModel(model_path).get # Baseline parameters bldg_type = \u0026#39;MediumOffice\u0026#39; climate_zone = \u0026#39;ASHRAE 169-2013-4A\u0026#39; baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; default_hvac_bldg_type = \u0026#39;other nonresidential\u0026#39; default_wwr_bldg_type = \u0026#39;Office 5,000 to 50,000 sq ft\u0026#39; default_swh_bldg_type = \u0026#39;Office\u0026#39; Finally, add the script to generate baseline:\n# load the PRM standard package standard = Standard.build(\u0026#39;90.1-PRM-2019\u0026#39;) P \u0026#34;start generating baseline model ... at #{baseline_dir}\u0026#34; baseline_models = standard.model_create_prm_stable_baseline_building(model, bldg_type, climate_zone, default_hvac_bldg_type, default_wwr_bldg_type, default_swh_bldg_type, nil, baseline_dir, run_all_orients=true, unmet_load_hours_check=true, debug=false) There are many arguments for the model_create_prm_stable_baseline_building function but don\u0026rsquo;t sweat on it. We will cover each one of them in later sections. Nevertheless, this script is sufficient to generate the baseline models for our prototype model.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/get_start/quick_start/more_examples/",
	"title": "More examples",
	"tags": [],
	"description": "",
	"content": "This section will walk through an additional script that alters our prototype model before running the baseline.\nOpenStudio Standard package is a powerful package that allows user to manipulate their models with simple commands - particularly high-level HVAC templates and model data modifications.\nIn this section, we will use the OpenStudio Standard package to:\nReset window to wall ratio to 60% Add overhangs to the south facade Replace the HVAC system with DOAS + water source heat pumps. First, let\u0026rsquo;s load the model and standard package.\nmodel_path = \u0026#34;#{File.dirname(Dir.pwd)}/output/\u0026#34; save_path = \u0026#34;#{File.dirname(Dir.pwd)}/source/\u0026#34; base_model = \u0026#39;test_model.osm\u0026#39; modified_model = \u0026#39;modified_model_demo.osm\u0026#39; # Load standard package standard = Standard.build(\u0026#39;90.1-PRM-2019\u0026#39;) # load model translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path + base_model).get After the model is loaded, we can firstly modify the window-to-wall ratio using a simple function: setWindowToWallRatio from OpenStudio API.\n# Remove HVAC system and EMS (if any) standard.model_remove_prm_hvac(model) standard.model_remove_prm_ems_objects(model) # remove transformers model.getElectricLoadCenterTransformers.each(\u0026amp;:remove) # Loop through every sub surface model.getSurfaces.each do |ss| unless ss.subSurfaces.empty? orig_construction = ss.subSurfaces[0].construction.get ss.subSurfaces.sort.each(\u0026amp;:remove) # Set WWR to 60% with sill height of 0.8 m. new_window = ss.setWindowToWallRatio(0.6, 0.8, true).get new_window.setConstruction(orig_construction) end end Next, we will add overhangs to the south facade\n# loop sub surfaces model.getSubSurfaces.each do |s| # get the absolute azimuth of the sub surface absoluteAzimuth = OpenStudio.convert(s.azimuth, \u0026#39;rad\u0026#39;, \u0026#39;deg\u0026#39;).get + s.space.get.directionofRelativeNorth + model.getBuilding.northAxis # filter out non-south sub surfaces next if !((absoluteAzimuth \u0026gt;= 135.0) \u0026amp;\u0026amp; (absoluteAzimuth \u0026lt; 225.0\u0026gt;)) # Adds overhangs 0.8 m s.addOverhangByProjectionFactor(0.8, 0) end Last, we will add a DOAS + water source heat pump to the model. We will add one DOAS per floor and one heat pump per thermal zone.\n# split thermal zones by floors, exclude plenum zones thermal_top_zones = [] thermal_mid_zones = [] thermal_bot_zones = [] model.getThermalZones.each do |zone| unless /Plenum/ =~ zone.name.get if /top/ =~ zone.name.get thermal_top_zones.append(zone) elsif /bot/ =~ zone.name.get thermal_bot_zones.append(zone) else thermal_mid_zones.append(zone) end end end # Add a hot water plant loop for DOAS hot_water_loop = standard.model_add_hw_loop(model, \u0026#39;NaturalGas\u0026#39;) # Add a heat pump plant loop condenser_loop = standard.model_get_or_add_heat_pump_loop(model, \u0026#39;Electricity\u0026#39;, \u0026#39;Electricity\u0026#39;, heat_pump_loop_cooling_type: \u0026#39;CoolingTower\u0026#39;) # Top floor zone standard.model_add_water_source_hp(model, thermal_top_zones, condenser_loop, ventilation: true) standard.model_add_doas(model, thermal_top_zones, system_name: \u0026#39;DOAS TOP System\u0026#39;, doas_type: \u0026#39;DOASCV\u0026#39;, hot_water_loop: hot_water_loop, chilled_water_loop: nil) # Mid floor zone standard.model_add_water_source_hp(model, thermal_mid_zones, condenser_loop, ventilation: true) standard.model_add_doas(model, thermal_mid_zones, system_name: \u0026#39;DOAS MID System\u0026#39;, doas_type: \u0026#39;DOASCV\u0026#39;, hot_water_loop: hot_water_loop, chilled_water_loop: nil) # Bottom floor zone standard.model_add_water_source_hp(model, thermal_bot_zones, condenser_loop, ventilation: true) standard.model_add_doas(model, thermal_bot_zones, system_name: \u0026#39;DOAS BOT System\u0026#39;, doas_type: \u0026#39;DOASCV\u0026#39;, hot_water_loop: hot_water_loop, chilled_water_loop: nil) That\u0026rsquo;s it. In the end, we will call the baseline function to generate a baseline.\nbldg_type = \u0026#39;MediumOffice\u0026#39; climate_zone = \u0026#39;ASHRAE 169-2013-4A\u0026#39; baseline_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; default_hvac_bldg_type = \u0026#39;other nonresidential\u0026#39; default_wwr_bldg_type = \u0026#39;Office 5,000 to 50,000 sq ft\u0026#39; default_swh_bldg_type = \u0026#39;Office\u0026#39; baseline_models = standard.model_create_prm_stable_baseline_building(model, bldg_type, climate_zone, default_hvac_bldg_type, default_wwr_bldg_type, default_swh_bldg_type, nil, baseline_dir, run_all_orients=false, unmet_load_hours_check=true, debug=false) Now we can have a more visual comparison between the prototype and baseline. In the baseline, the windows are shrunk, and the overhangs are removed. Also, the HVAC system was changed from DOAS + water source heat pump to Packaged VAV system (system type 5).\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/model_requirements/standards_space_type/",
	"title": "Standards space type",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/model_requirements/other_requirements/",
	"title": "Other requirements",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/user_data_building/",
	"title": "User data: Building",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/user_data_space/",
	"title": "User data: Space",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/user_data_space_type/",
	"title": "User data: Space type",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/add_compliance_data/user_data_exterior_lights/",
	"title": "User Data: Exterior Lights",
	"tags": [],
	"description": "",
	"content": "User Data CSV File: user_data_exterior_lights.csv\nEach exterior lights object in the model can be assigned up to nine exterior lighting subcategories in the user data file based on Appendix G Table G3.6. The lighting subcategories are designated by the labels:\nenduse_subcategory_01\n_through\nend_use_subcategory_09\nFor each subcategory, the appropriate quantity must also be listed, as designated by:\nenduse_measurement_value_01\n_through\nend_use_measurement_value_09\nThe units of the measurement value are indicated by the last part of the subcategory name:\n\u0026lsquo;area\u0026rsquo; = area in square feet\n\u0026lsquo;perim\u0026rsquo; = perimiter length in linear feet\n\u0026lsquo;qty\u0026rsquo; = integer quantity of items\nNote: the measurement values in the user data table need to be the total quantities for the applicable exterior lights object (accounting for any multipliers). If there is a multiplier in the object, it will be changed to \u0026lsquo;1\u0026rsquo; for the baseline model.\nCredit can only be taken for exterior lights that are classified as tradeable. Thus, each exterior lighting object in the model must be configured to represent either only tradeable or only non-tradeable subcategories. If any non-tradeable subcategories are included, the entire object will be treated as non-tradeable for the baseline.\nIn order to work with the Appendix G code database, the following subcategory names must be used in the user data file:\nTradeable Exterior Lighting Subcategories parking_lots_and_drives_area\nwalkways_less_than_10_ft_wide_perim\nwalkways_10_ft_wide_or_greater_area\nplaza_areas_area\nspecial_feature_areas_area\nstairways_area\nmain_entries_area\nother_doors_perim\ncanopies_area\nopen_areas_including_vehicle_sales_lots_area\nstreet_frontage_for_vehicle_sales_perim\nNon-Tradeable Exterior Lighting Subcategories nontradeable_general_qty\nbuilding_facades_area\nbuilding_facades_perim\nautomated_teller_machines_per_location_qty\nautomated_teller_machines_per_machine_qty\nentries_and_gates_area\nloading_areas_for_emergency_vehicles_area\ndrive_through_windows_and_doors_qty\nparking_near_24_hour_entrances_qty\nroadway_parking_qty\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/prm_api_ref/baseline_generation_api/",
	"title": "Baseline generation API",
	"tags": [],
	"description": "",
	"content": " model_create_prm_stable_baseline_building model climate_zone default_hvac_bldg_type default_wwr_bldg_type default_swh_bldg_type output_dir unmet_load_hours debug convert_userdata_csv_to_json userdata_dir output_dir load_userdata_to_standards_database model_create_prm_stable_baseline_building standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) create_results = standard.model_create_prm_stable_baseline_building(model, climate_zone, default_hvac_bldg_type, default_wwr_bldg_type, default_swh_bldg_type, output_dir, unmet_load_hours, debug) The key function that generates the ASHRAE 90.1 PRM model contains many arguments. Many of them have specific enum values. For a successful generation, these arguments need to have exact match to their enum values. In this instruction, we will walk through the argument list so this API call can be customized for any purposes and building cases.\nThis API function is a primary function to generate baseline models. The function takes in a user created OpenStudio model and a number of user-defined arguments to generate baseline.\nStep 1: Check proposed model graph LR; A(Check proposed model) --\u003e|check severe errors and unmet load hours| B{Decision} B --\u003e|Passed| C(Create four baseline models) B --\u003e|Failed| D(Create one baseline model) The simulation results in this step will be saved in the folder SR_PROP0.\nStep 2: Adjust envelope and internal loads In this step, the function primarily start adjusting the envelope and internal loads based on the information stored in the method arguments and user supplied model. In addition, this step also prepares HVAC systems, adjust the HVAC system for a sizing run.\ngraph LR; A(Adjust Internal Loads) --\u003e|Remove external shades| B(Shades) A --\u003e|Apply compliacne window to wall ratio| C(WWR) A --\u003e|Apply compliance skylight to root ratio| D(SRR) A --\u003e|Apply compliance lighting power density| E(LPD) A --\u003e|Adjust schedule to handle occupancy sensors| F(Schedule) A --\u003e|Remove daylighting| G(Daylight) A --\u003e|Replace constructions| H(Constructions) A --\u003e|Add HVAC and sizing info| I(HVAC) After all above is applied, a sizing run is conducted and labeled as SR1 in the output directory.\nStep 3: Fine tune HVAC system parameters 1 Based on the sizing run results in the SR1 folder, this step will fine tuning the HVAC parameters based on the ASHRAE 90.1 appendix G specifications.\ngraph LR; A(HVAC System) --\u003e|Tune baseline air loop fan power| B(Airloop Fans) A --\u003e|Tune baseline zone fan power| C(Zone Fans) A --\u003e|Tune boilers| D(Boilers) A --\u003e|Tune chillers| E(Chllers) A --\u003e|Tune cooling towers| F(CoolingTowers) After all above steps are completed, a second sizing run is conducted and labeled as SR2 in the output directory. In this run, several key metrics in the HVAC system will be determined such as the capacity of the chillers and loop flow rates.\nStep 4: Fine tune HVAC system parameters 2 In this step, it further fine tune some parameters in the HVAC components graph LR; A(HVAC Component) --\u003e|Tune component efficiency| B(Efficiency) A --\u003e|Set demand control ventilation| C(DCV) A --\u003e|Tune pump power and controls| D(Pump) A third sizing run is conducted after this step and labeled as SR3 in the output directory. The third sizing run is the final sizing run to refining size-dependent values including the secondary flow rate in the parallel PIU reheat terminal, and the maximum flow rate in the air terminal.\nOne or four baseline models will generated in the output directory after these four steps. The output directory is an arugment provided by user when calling this function. In the next section, we will provide a detail explanation of these arguments.\n- model model is the OpenStudio model. A typical way to load an OpenStudio model is through the version translator.\nmodel_path = \u0026#39;\\some_path\\some_os_model.osm\u0026#39; translator = OpenStudio::OSVersion::VersionTranslator.new model = translator.loadModel(model_path).get - climate_zone The climate_zone shall be one of the strings from the list below:\nASHRAE 169-2013-0A ASHRAE 169-2013-0B ASHRAE 169-2013-1A ASHRAE 169-2013-1B ASHRAE 169-2013-2A ASHRAE 169-2013-2B ASHRAE 169-2013-3A ASHRAE 169-2013-3B ASHRAE 169-2013-3C ASHRAE 169-2013-4A ASHRAE 169-2013-4B ASHRAE 169-2013-4C ASHRAE 169-2013-5A ASHRAE 169-2013-5B ASHRAE 169-2013-5C ASHRAE 169-2013-6A ASHRAE 169-2013-6B ASHRAE 169-2013-7A ASHRAE 169-2013-7B ASHRAE 169-2013-8A ASHRAE 169-2013-8B - default_hvac_bldg_type The default_hvac_bldg_type shall be one of the strings in the list below:\nheated only storage hospital public assembly retail other nonresidential residential unconditioned - default_wwr_bldg_type The default_wwr_bldg_type shall be one of the strings in the list below:\nWarehouse (nonrefrigerated) School (secondary and university) School (primary) Retail (strip mall) Retail (stand alone) Restaurant (quick service) Restaurant (full serivce) Office \u0026gt; 50,000 sq ft Office \u0026lt;= 5,000 sq ft Office 5,00 to 50,000 sq ft Hotel/motel \u0026gt; 75 rooms Hotel/motel \u0026lt;= 75 rooms Hospital Healthcare (outpatient) Grocery store All other - default_swh_bldg_type The default_swh_bldg_type shall be one of the strings in the list below:\nWorkshop Warehouse Transportation Town hall Sport arena School/university Retail Religious facility Post office Police station Performing arts theater Penitentiary Parking garage Office Museum Multifamily Motion picture theater Motel Manufacturing facility Library Hotel Hospital and outpatient surgery center Health-care clinic Gymnasium Grocery store Fire station Exercise center Domitory Dining:Family Dining: Cafeteria/fast food Dining: Bar lounge/leisure Courthouse Convention center Convenience store Automotive facility All others - output_dir output_dir is a mandatory field that specifies the directory to save all sizing runs. When applying PRM method on a proposed model, OSSTD will perform several sizing runs. These sizing runs usually saved in a directory specified in sizing_run_dir. In addition, the generated baseline model .idf and .osm will also be saved in the this directory.\n- unmet_load_hours unmet_load_hours is a flag to check whether the model can successfully run a annual simulation and the annual unmet load hours is smaller than 300 hours as required by ASHRAE 90.1 Appendix G. The default value for this flag is false, which skips the two checks and run baseline generation.\nCautious when setting the unmet_load_hours to false. This could result in wrong baseline models or crash the baseline generation process.\n- debug debug default is set to false. This argument has no impact to the current PRM generation and is part of the future implementation. For now, any API calls can set to false or simply ignore this argument.\nconvert_userdata_csv_to_json The function converts user data in csv format to json format and it is typically called before loading the user data before baseline generation.\nstandard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) userdata_dir = \u0026#34;#{File.dirname(Dir.pwd)}/user_data\u0026#34; output_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # Converts user data from .csv file to .json file json_path = standard.convert_userdata_csv_to_json(userdata_dir, output_dir) The function has two arguments, userdata_dir and output_dir. The function first load all the default userdata templates as json, then grabs all the user csv files saved in the userdata_dir and insert data from the csv files into the json data. Lastly, the function saves the json to the output_dir in the user_data_json folder.\n- userdata_dir This argument shall be a valid directory string that pointing to the folder where all user data csv are saved. Example can be:\n\u0026#34;C:\\\\documents\\\\my_user_data\u0026#34; - output_dir This argument shall be a valid directory string that pointing to the folder where all user data json saved. Example can be:\n\u0026#34;C:\\\\documents\\\\user_data_json\u0026#34; load_userdata_to_standards_database The function loads the user data folder into the 90.1-PRM-2019 standard object. A typical workflow will call convert_userdata_csv_to_json first to convert all user data from csv to json and then call load_userdata_to_standards_database to load the json into the workflow.\nstandard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) userdata_dir = \u0026#34;#{File.dirname(Dir.pwd)}/user_data\u0026#34; output_dir = \u0026#34;#{File.dirname(Dir.pwd)}/output\u0026#34; # Converts user data from .csv file to .json file json_path = standard.convert_userdata_csv_to_json(userdata_dir, output_dir) standard.load_userdata_to_standards_database(json_path) json_path shall be a valid directory string that pointing to the folder where all user data json saved.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/user_guide/prm_api_ref/wwr_api/",
	"title": "Window API",
	"tags": [],
	"description": "",
	"content": " Quick use Function workflow Quick Use climate_zone = \u0026#34;ASHRAE 169-2013-4A\u0026#34; wwr_building_type = \u0026#34;Office \u0026lt;= 5,000 sq ft\u0026#34; standard = Standard.build(\u0026#34;90.1-PRM-2019\u0026#34;) result, wwr_info = standard.model_apply_prm_baseline_window_to_wall_ratio(model, climate_zone, wwr_building_type) The above code adjust the window to wall ratio in the model to the specified building type. Each building type maps to a window to wall ratio.\nBuilding Area Types Baseline building vertical fenestration percentage of gross-above-grade wall area Grocery store 7% Warehouse (nonrefrigerated) 6% School (secondary and university) 22% School (primary) 22% Retail (strip mall) 20% Retail (stand alone) 11% Restaurant (quick service) 34% Restaurant (full serivce) 24% Office \u0026gt; 50,000 sq ft 40% Office \u0026lt;= 5,000 sq ft 19% Office 5,00 to 50,000 sq ft 31% Hotel/motel \u0026gt; 75 rooms 34% Hotel/motel \u0026lt;= 75 rooms 24% Hospital 27% Healthcare (outpatient) 21% All other 40% The mapping is shown in the above table. Once the function identifies the correct building area, it will applies the window to wall ratio to the entire model.\nFunction workflow Step 1: Check proposed model graph LR; A(Model) --\u003e|Loop| B(Spaces) B --\u003e|Apply building area type| C(BAT) B --\u003e|Surface conditioning category| D{Condition} D --\u003e|Conditioned space| E(Surfaces) C --\u003e|Target WWR| F(Adjust Ratio) E --\u003e|Existing WWR| F(Adjust WWR) "
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/",
	"title": "Home",
	"tags": [],
	"description": "",
	"content": "Create ASHRAE 90.1-2019 PRM Model The OpenStudio Standard \u0026ldquo;Create ASHRAE 90.1-2019 PRM Model\u0026rdquo; measure is a tool to support energy model automation for ASHRAE 90.1 Appendix G performance rating method compliance evaluation.\n"
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://pnnl.github.io/BEM-for-PRM/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]